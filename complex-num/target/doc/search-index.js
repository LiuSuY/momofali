var searchIndex = JSON.parse('{\
"complex_num":{"doc":"","t":"F","n":["main"],"q":["complex_num"],"d":[""],"i":[0],"f":[[[]]],"p":[]},\
"num":{"doc":"A collection of numeric types and traits for Rust.","t":"DGDIIIIIDIIQSIIISIIGGGIIIISSSIFKKLLFKKLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLKLLKKLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFKLLLLLLKKLLLKLLLLLLLKLLLFLLKLLLLFLKLLLLLLLLLLALLLKLLKLLKLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLKLLKLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLKLLLLLLLLLLLKLLLLLLLKLLLLLLLLKLLMLLLKAKLLLLLLLKLLKLLKLLKLLKLLKLKLLKLLLLLLKLKKLKLLLALLLLLLKLLLKKLLKKLLKLLKLLLKKKKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKKLLLLLLLLLLLLLLFKLLLLLLLAFKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLFFFFALMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKKKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKFKKLKLLKKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLKLLAKLLLLLLLLLLLLLLLLLLKKFKLLLDDNNDNEIIDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLDGGIDQKKKKKKKKLLFFKKKKLLKKKLLLKMLKKKKKKKKKKKKLKMKKKKKKLLLLIDIDIFKFKFLLLLFLLLLFLFKFLFKLLLLLLLFKMFLLLLLKKKFKFKFLLLFKLFLLLLLLLLMMDDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLQIFFKGSDDGGGSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIIQQIIIIIIIIIIIKNIKKKKKKKKKIIEIIQINKKLKLKIIIIIIIIISIQQQKDIIIKIIIIILIIIIIIIIISIFKKFKKKKKKKKKKLLLLAAFKKKKKLKKFKKKKKFLFFKLKKKKKLLKKKAKLLLKKLLKKLLLLLKLLKKLKLLLKLLKAKAKLLKKKKKKLKKKLKMLKKKKKKKKKKKKKKKKKKKFKAAFKKKKAKKLKKKKKKKKLLAKKFKKKKKKKKKKKLLLLLLKLLKKLLLLLLKLLLKKLLLLLLKKKKKKKKFKIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLIKLKKKKKKKKKKLLLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKKLIISISILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKLKKLKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["BigInt","BigRational","BigUint","Bounded","CheckedAdd","CheckedDiv","CheckedMul","CheckedSub","Complex","Float","FromPrimitive","FromStrRadixErr","I","Integer","Num","NumCast","ONE","One","PrimInt","Rational","Rational32","Rational64","Saturating","Signed","ToPrimitive","Unsigned","ZERO","ZERO","ZERO","Zero","abs","abs","abs","abs","abs","abs_sub","abs_sub","abs_sub","abs_sub","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","assign_from_slice","assign_from_slice","atan","atan","atan","atan2","atanh","atanh","atanh","average_ceil","average_ceil","average_floor","average_floor","bigint","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","cbrt","ceil","checked_add","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_div_rem_euclid","checked_div_rem_euclid","checked_mul","checked_mul","checked_mul","checked_mul","checked_pow","checked_rem_euclid","checked_rem_euclid","checked_sub","checked_sub","checked_sub","checked_sub","cis","clamp","clamp","classify","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","complex","conj","conj","copysign","cos","cos","cos","cosh","cosh","cosh","count_ones","count_ones","count_zeros","dec","dec","dec","default","default","default","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_ceil","div_euclid","div_euclid","div_floor","div_floor","div_floor","div_mod_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem","div_rem_euclid","div_rem_euclid","divides","divides","divides","epsilon","eq","eq","eq","exp","exp","exp","exp2","exp2","exp2","exp_m1","expf","expf","extended_gcd","extended_gcd_lcm","extended_gcd_lcm","fdiv","finv","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_i128","from_i128","from_i128","from_i128","from_i16","from_i16","from_i32","from_i32","from_i64","from_i64","from_i64","from_i64","from_i8","from_i8","from_isize","from_isize","from_le","from_le_bytes","from_le_bytes","from_polar","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str","from_str_radix","from_str_radix","from_str_radix","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u16","from_u16","from_u32","from_u32","from_u64","from_u64","from_u64","from_u64","from_u8","from_u8","from_usize","from_usize","gcd","gcd","gcd","gcd_lcm","gcd_lcm","gcd_lcm","hash","hash","hash","hypot","i","im","im","inc","inc","inc","infinity","integer","integer_decode","into","into","into","into_parts","inv","inv","inv","is_even","is_even","is_even","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_multiple_of","is_multiple_of","is_multiple_of","is_nan","is_nan","is_nan","is_negative","is_negative","is_normal","is_normal","is_normal","is_odd","is_odd","is_odd","is_one","is_one","is_one","is_one","is_positive","is_positive","is_sign_negative","is_sign_positive","is_subnormal","is_zero","is_zero","is_zero","is_zero","iter","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","l1_norm","l1_norm","lcm","lcm","lcm","leading_ones","leading_zeros","ln","ln","ln","ln_1p","log","log","log","log10","log10","log10","log2","log2","log2","magnitude","max","max_value","max_value","min","min_positive_value","min_value","min_value","mod_floor","mod_floor","mod_floor","modinv","modinv","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nan","neg","neg","neg","neg","neg_infinity","neg_zero","new","new","new","next_multiple_of","next_multiple_of","next_multiple_of","norm","norm_sqr","not","not","nth_root","nth_root","nth_root","nth_root","one","one","one","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powf","powf","powf","powi","powi","powi","powu","prev_multiple_of","prev_multiple_of","prev_multiple_of","product","product","product","product","range","range_inclusive","range_step","range_step_inclusive","rational","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_sub","scale","set_bit","set_bit","set_one","set_one","set_one","set_one","set_zero","set_zero","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signed_shl","signed_shr","signum","signum","signum","signum","sin","sin","sin","sin_cos","sinh","sinh","sinh","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","sum","sum","swap_bytes","tan","tan","tan","tanh","tanh","tanh","to_be","to_be_bytes","to_be_bytes","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_degrees","to_f32","to_f32","to_f32","to_f32","to_f64","to_f64","to_f64","to_f64","to_i128","to_i128","to_i128","to_i128","to_i16","to_i16","to_i32","to_i32","to_i64","to_i64","to_i64","to_i64","to_i8","to_i8","to_isize","to_isize","to_le","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_polar","to_radians","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_u128","to_u128","to_u128","to_u128","to_u16","to_u16","to_u32","to_u32","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64","to_u64","to_u64_digits","to_u64_digits","to_u8","to_u8","to_usize","to_usize","trailing_ones","trailing_ones","trailing_zeros","trailing_zeros","trailing_zeros","traits","trunc","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unscale","unsigned_shl","unsigned_shr","zero","zero","zero","zero","zero","BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","count","count","description","description","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","into","into","into_iter","into_iter","into_original","last","last","len","len","mul","neg","next","next","next_back","next_back","nth","partial_cmp","provide","provide","size_hint","size_hint","to_bigint","to_biguint","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","Complex","Complex32","Complex64","ComplexFloat","ParseComplexError","Real","abs","acos","acosh","arg","asin","asinh","atan","atanh","borrow","borrow_mut","c32","c64","cbrt","conj","cos","cosh","description","eq","exp","exp2","expf","fmt","fmt","from","im","im","into","is_finite","is_infinite","is_nan","is_normal","l1_norm","ln","log","log10","log2","powc","powf","powi","provide","re","re","recip","sin","sinh","sqrt","tan","tanh","to_string","try_from","try_into","type_id","Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","clone","clone_into","dec","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","inc","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y","Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","Output","Pow","checked_pow","pow","pow","BigRational","ONE","ParseRatioError","Ratio","Rational","Rational32","Rational64","ZERO","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","approximate_float_unsigned","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into_raw","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero","AsPrimitive","Bounded","Bytes","Bytes","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","E","Empty","Euclid","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","ONE","One","Output","Output","Output","PI","ParseFloatError","Pow","PrimInt","RefNum","SQRT_2","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","TAU","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","ZERO","Zero","abs","abs","abs","abs_sub","abs_sub","abs_sub","acos","acosh","as_","asin","asinh","atan","atan2","atanh","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","cbrt","ceil","checked_add","checked_div","checked_div_euclid","checked_div_rem_euclid","checked_mul","checked_neg","checked_pow","checked_rem","checked_rem_euclid","checked_shl","checked_shr","checked_sub","clamp","clamp","clamp_max","clamp_min","classify","copysign","cos","cosh","count_ones","count_zeros","div_euclid","div_rem_euclid","epsilon","exp","exp2","exp_m1","float","floor","fmt","fmt","fmt","fract","from","from","from","from_be","from_be_bytes","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_le","from_le_bytes","from_ne_bytes","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hypot","identities","infinity","int","integer_decode","into","into","inv","is_finite","is_infinite","is_nan","is_negative","is_normal","is_one","is_positive","is_sign_negative","is_sign_positive","is_subnormal","is_zero","kind","leading_ones","leading_zeros","ln","ln_1p","log","log10","log2","max","max_value","max_value","min","min_positive_value","min_value","min_value","mul_add","mul_add","mul_add_assign","nan","neg_infinity","neg_zero","one","one","ops","pow","pow","pow","pow","powf","powi","real","recip","rem_euclid","reverse_bits","rotate_left","rotate_right","round","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","set_one","set_zero","sign","signed_shl","signed_shr","signum","signum","signum","sin","sin_cos","sinh","sqrt","swap_bytes","tan","tanh","to_be","to_be_bytes","to_degrees","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_le","to_le_bytes","to_ne_bytes","to_radians","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","trailing_ones","trailing_zeros","trunc","try_from","try_from","try_into","try_into","type_id","type_id","unsigned_shl","unsigned_shr","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","zero","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","clamp","clamp","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","total_cmp","trunc","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["numnum::bigint","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::complex","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::pow","","","","","num::rationalnum::traitsnum::traits::bounds","","","","","","","num::traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::identities","","","","","","","","","","","","","","num::traits::int","","","","","","","","","","","","","","","","","","","","num::traits::ops","","","","","","","","num::traits::ops::bytes","","","","","","","","","","","num::traits::ops::checked","","","","","","","","","","","","","","","","num::traits::ops::euclid","","","","","","","","num::traits::ops::inv","","","num::traits::ops::mul_add","","","","","num::traits::ops::overflowing","","","","","","num::traits::ops::saturating","","","","","","","","","num::traits::ops::wrapping","","","","","","","","","","","","num::traits::pow","","","","","num::traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num::traits::sign","","","","","","","","",""],"d":["A big signed integer type.","Alias for arbitrary precision rationals.","A big unsigned integer type.","Numbers which have upper and lower bounds","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs subtraction that returns <code>None</code> instead of wrapping …","A complex number in Cartesian form.","Generic trait for floating point numbers","A generic trait for converting a number to a value.","","A constant <code>Complex</code> <em>i</em>, the imaginary unit.","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","An interface for casting between machine scalars.","A constant <code>Complex</code> 1.","Defines a multiplicative identity element for <code>Self</code>.","Generic trait for primitive integers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Useful functions for signed numbers (i.e. numbers that can …","A generic trait for converting a value to a number.","A trait for values which cannot be negative","A constant <code>BigInt</code> with value 0, useful for static …","A constant <code>Complex</code> 0.","A constant <code>BigUint</code> with value 0, useful for static …","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","","","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>.","","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculate the principal Arg of self.","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","","Computes the principal value of inverse hyperbolic sine of …","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Computes the arctangent of a number. Return value is in …","Computes the principal value of the inverse tangent of <code>self</code>…","","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the truncated principal cube root of <code>self</code> – see …","","","Computes the principal value of the cube root of <code>self</code>.","Returns the truncated principal cube root of <code>self</code> – see …","","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","","","","Divides two numbers, checking for underflow, overflow and …","","","","","","","","Multiplies two numbers, checking for underflow or …","","","","Raises a value to the power of exp, returning <code>None</code> if an …","","","Subtracts two numbers, checking for underflow. If …","","","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","A value bounded by a minimum and a maximum","Clamps a value between a min and max.","Returns the floating point category of the number. If only …","","","","","","","","","","","","Returns the complex conjugate. i.e. <code>re - i im</code>","","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Computes the cosine of <code>self</code>.","","Hyperbolic cosine function.","","Computes the hyperbolic cosine of <code>self</code>.","Returns the number of ones in the binary representation of …","Returns the number of one bits.","Returns the number of zeros in the binary representation …","Decrements self by one.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Ceiled integer division.","","","","","Floored integer division.","","","Simultaneous floored integer division and modulus. Returns …","","","Simultaneous truncated integer division and modulus. …","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","Returns epsilon, a small positive value.","","","","Returns <code>e^(self)</code>, (the exponential function).","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Returns <code>2^(self)</code>.","","Computes <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Raises a floating point number to the complex power <code>self</code>.","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","Greatest common divisor, least common multiple, and …","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","Returns the largest integer less than or equal to a number.","","","","","","","","","","","","","","","","","","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","","","Returns the argument unchanged.","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","Returns the argument unchanged.","","","Convert an integer from big endian to the target’s …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Converts a <code>f32</code> to return an optional value of this type. …","","Converts a <code>f64</code> to return an optional value of this type. …","","","","Converts an <code>i128</code> to return an optional value of this type. …","","","","Converts an <code>i16</code> to return an optional value of this type. …","","Converts an <code>i32</code> to return an optional value of this type. …","","Converts an <code>i64</code> to return an optional value of this type. …","","","","Converts an <code>i8</code> to return an optional value of this type. …","","Converts an <code>isize</code> to return an optional value of this …","","Convert an integer from little endian to the target’s …","","","Convert a polar representation into a complex number.","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","Convert from a string and radix (typically <code>2..=36</code>).","Creates and initializes a <code>BigInt</code>.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Creates and initializes a <code>BigUint</code>.","Converts an <code>u128</code> to return an optional value of this type. …","","","","Converts an <code>u16</code> to return an optional value of this type. …","","Converts an <code>u32</code> to return an optional value of this type. …","","Converts an <code>u64</code> to return an optional value of this type. …","","","","Converts an <code>u8</code> to return an optional value of this type. …","","Converts a <code>usize</code> to return an optional value of this type. …","","Greatest Common Divisor (GCD).","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","Calculate the length of the hypotenuse of a right-angle …","Returns the imaginary unit.","","Imaginary portion of the complex number","Increments self by one.","","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","","Returns <code>1/self</code>","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","","Returns true if the number is negative and false if the …","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","Returns <code>true</code> if the number is odd.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","","","","Returns true if the number is positive and false if the …","","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Lowest Common Multiple (LCM).","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","","Computes the principal value of natural logarithm of <code>self</code>.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Returns the base 10 logarithm of the number.","","Computes the principal value of log base 10 of <code>self</code>.","Returns the base 2 logarithm of the number.","","Computes the principal value of log base 2 of <code>self</code>.","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Floored integer modulo, satisfying:","","","Returns the modular multiplicative inverse if it exists, …","Returns the modular multiplicative inverse if it exists, …","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the <code>NaN</code> value.","","","","","Returns the negative infinite value.","Returns <code>-0.0</code>.","Creates and initializes a <code>BigInt</code>.","Create a new <code>Complex</code>","Creates and initializes a <code>BigUint</code>.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","Raise a number to a floating point power.","","Raises <code>self</code> to a floating point power.","Raise a number to an integer power.","","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to an unsigned integer power.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating subtraction operator. Returns a-b, saturating …","Multiplies <code>self</code> by the scalar <code>t</code>.","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","","","","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</codeeturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","Returns the truncated principal square root of <code>self</code> – …","","Computes the principal value of the square root of <code>self</code>.","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Computes the tangent of <code>self</code>.","","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","","Convert <code>self</code> to big endian from the target’s endianness.","","","","","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","","","","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","","","","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","","Convert <code>self</code> to little endian from the target’s …","","","","","","Convert to polar form (r, theta), such that …","Converts degrees to radians.","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","","","","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","","Returns the number of trailing ones in the binary …","Returns the number of least-significant bits that are ones.","Returns the number of trailing zeros in the binary …","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","Return the integer part of a number.","","","","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","","","","A big signed integer type.","A big unsigned integer type.","","","","","A <code>Sign</code> is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","","","","","","Negate <code>Sign</code> value.","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","Converts the value of <code>self</code> to a <code>BigUint</code>.","","","","","","","","","","","","","","","","","","","","","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","A complex number in Cartesian form.","Alias for a <code>Complex&lt;f32&gt;</code>","Alias for a <code>Complex&lt;f64&gt;</code>","Generic trait for floating point complex numbers.","","The type used to represent the real coefficients of this …","Returns the absolute value of the number. See also …","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the argument of the number.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Inverse hyperbolic tangent function.","","","Create a new <code>Complex&lt;f32&gt;</code> with arguments that can convert …","Create a new <code>Complex&lt;f64&gt;</code> with arguments that can convert …","Take the cubic root of a number.","Computes the complex conjugate of the number.","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","","","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>base^(self)</code>.","","","Returns the argument unchanged.","Returns the imaginary part of the number.","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the natural logarithm of the number.","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","Raises <code>self</code> to a signed integer power.","","Returns the real part of the number.","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","Computes the sine of a number (in radians).","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","","","","","Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Decrements self by one.","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Increments self by one.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","","","An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","Alias for arbitrary precision rationals.","A constant <code>Ratio</code> 1/1.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","A constant <code>Ratio</code> 0/1.","","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs a <code>Ratio</code> into its numerator and denominator.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","","","A generic interface for casting between machine scalars …","Numbers which have upper and lower bounds","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Defines an associated constant representing the …","Defines an associated constant representing the additive …","Return Euler’s number.","","","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","","","A generic trait for converting a number to a value.","","Unary operator for retrieving the multiplicative inverse, …","","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","An interface for casting between machine scalars.","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The result after applying the operator.","The resulting type after applying the fused multiply-add.","The result after applying the operator.","Return Archimedes’ constant <code>π</code>.","","Binary operator for raising a value to a power.","Generic trait for primitive integers.","The trait for <code>Num</code> references which implement numeric …","Return <code>sqrt(2.0)</code>.","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Useful functions for signed numbers (i.e. numbers that can …","Return the full circle constant <code>τ</code>.","","A generic trait for converting a value to a number.","A trait for values which cannot be negative","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Computes the absolute value.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Convert a value to another, using the <code>as</code> operator.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","","","","","","","Cast from one machine scalar to another.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Raises a value to the power of exp, returning <code>None</code> if an …","Finds the remainder of dividing two numbers, checking for …","Finds the euclid remainder of dividing two numbers, …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","A value bounded by a minimum and a maximum","Clamps a value between a min and max.","A value bounded by a maximum value","A value bounded by a minimum value","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","","Returns the largest integer less than or equal to a number.","","","","Returns the fractional part of a number.","Creates a number from another value that can be converted …","Returns the argument unchanged.","Returns the argument unchanged.","Convert an integer from big endian to the target’s …","Create a number from its representation as a byte array in …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Convert an integer from little endian to the target’s …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Convert from a string and radix (typically <code>2..=36</code>).","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Calculate the length of the hypotenuse of a right-angle …","","Returns the infinite value.","","Returns the mantissa, base 2 exponent, and sign as …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the multiplicative inverse of <code>self</code>.","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns true if the number is negative and false if the …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns true if the number is positive and false if the …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite number this type can represent","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite number this type can represent","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Returns the <code>NaN</code> value.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","","","Raises a value to the power of exp, using exponentiation …","Raises self to the power of <code>exp</code>, using exponentiation by …","Returns <code>self</code> to the power <code>rhs</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the nearest integer to a number. Round half-way …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Returns the sign of the number.","Returns a number that represents the sign of <code>self</code>.","Returns the sign of the number.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Reverses the byte order of the integer.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Convert <code>self</code> to big endian from the target’s endianness.","Return the memory representation of this number as a byte …","Converts radians to degrees.","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Convert <code>self</code> to little endian from the target’s …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Converts degrees to radians.","","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Return the integer part of a number.","","","","","","","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","A value bounded by a minimum and a maximum","Clamps a value between a min and max.","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,50,2,0,0,0,2,0,0,0,0,0,0,0,0,0,1,2,15,0,0,51,52,1,2,0,51,52,1,51,2,2,51,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,2,2,2,51,2,2,51,2,2,1,15,51,2,2,51,51,2,2,1,15,1,15,0,1,15,1,1,1,1,15,15,15,15,1,1,15,15,1,1,1,1,15,15,15,15,1,1,15,15,1,15,1,1,1,1,15,15,15,15,1,1,15,15,1,2,15,1,2,15,0,0,51,1,1,2,2,15,15,51,53,1,1,15,54,1,1,15,1,15,1,15,55,1,1,15,0,1,15,56,1,1,15,2,0,51,51,1,2,15,1,15,1,2,15,1,15,0,2,2,51,51,2,2,51,2,2,57,15,57,58,1,15,1,2,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,58,1,15,1,15,58,1,15,58,1,15,58,1,15,1,15,58,1,15,51,1,2,15,51,2,2,51,2,2,51,2,2,58,58,1,2,2,51,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,51,59,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,57,1,15,1,1,15,1,15,60,2,60,1,2,15,60,1,2,15,60,2,60,2,60,1,2,15,60,2,60,2,57,1,15,2,1,15,1,15,1,1,1,15,1,2,15,50,1,2,15,60,1,2,15,60,2,60,2,60,1,2,15,60,2,60,2,58,1,15,58,1,15,1,2,15,51,2,2,2,58,1,15,51,0,51,1,2,15,1,2,2,2,58,1,15,51,2,2,51,2,2,58,1,15,51,2,2,52,1,51,2,2,58,1,15,61,1,2,15,52,1,51,51,51,62,1,2,15,0,1,15,1,15,2,2,58,1,15,57,57,51,2,2,51,51,2,2,51,2,2,51,2,2,1,51,63,51,51,51,63,51,58,1,15,1,15,1,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,51,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,51,1,1,2,2,51,51,1,2,15,58,1,15,2,2,1,1,1,1,15,15,0,61,1,2,15,1,15,1,15,0,0,57,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,2,2,51,2,2,51,2,2,2,58,1,15,1,2,2,15,0,0,0,0,0,2,2,51,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,1,15,57,57,57,51,64,64,2,1,15,61,1,2,15,62,1,2,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,57,57,0,51,52,1,51,2,2,51,51,2,2,51,1,1,2,2,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,15,15,15,15,15,15,15,15,1,2,2,15,57,51,2,2,51,2,2,57,1,15,1,15,1,1,15,1,15,1,15,51,65,1,2,15,65,1,2,15,65,1,2,15,65,2,65,2,65,1,2,15,65,2,65,2,57,1,15,1,2,15,2,51,1,15,1,15,1,1,1,15,1,2,15,65,1,2,15,65,2,65,2,1,15,65,1,2,15,1,15,65,2,65,2,57,15,57,1,15,0,51,1,2,15,15,15,15,15,15,15,15,15,1,2,15,1,2,15,2,57,57,0,62,1,2,15,0,0,16,16,0,16,0,0,0,0,0,0,16,29,30,28,38,16,29,30,28,38,16,28,38,16,28,38,16,29,30,28,38,16,28,38,16,28,28,38,38,16,29,30,28,38,16,16,29,30,28,38,29,30,38,29,30,29,30,16,16,29,30,29,30,30,16,28,38,29,30,66,67,16,28,38,28,38,16,29,30,28,38,16,29,30,28,38,16,29,30,28,38,0,0,0,0,68,0,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,0,0,0,0,0,69,69,69,69,69,69,69,69,69,41,41,0,0,69,69,69,69,41,41,69,69,69,41,41,41,69,2,41,69,69,69,69,69,69,69,69,69,69,69,69,41,69,2,69,69,69,69,69,69,41,41,41,41,0,0,0,0,0,0,70,0,70,0,42,21,42,21,0,71,21,21,58,0,58,0,58,0,58,0,58,58,21,58,58,21,42,21,0,58,21,0,58,58,42,21,42,58,58,58,0,58,0,58,0,42,42,58,0,71,58,0,71,21,42,21,42,21,42,21,21,21,0,0,0,0,0,0,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,43,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,0,0,0,0,0,0,33,34,43,44,33,34,43,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,33,34,35,36,43,44,72,0,0,0,72,0,46,0,0,0,0,0,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,47,46,46,46,46,46,46,47,46,47,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,47,47,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,46,47,46,46,46,46,47,46,47,46,47,46,0,0,73,74,0,0,0,0,0,0,0,0,0,0,0,75,48,0,75,75,75,75,75,75,75,75,75,0,0,0,0,0,50,0,48,75,75,75,75,75,75,0,0,0,0,0,0,0,0,0,76,0,77,78,72,75,0,0,0,0,75,0,0,0,0,0,75,0,0,0,0,0,0,0,0,0,79,0,0,51,52,0,51,52,51,51,68,51,51,51,51,51,48,49,48,49,0,0,0,51,51,53,54,80,80,55,81,0,82,80,83,84,56,0,51,0,0,51,51,51,51,57,57,85,85,51,51,51,51,0,51,48,49,49,51,59,48,49,57,74,60,60,60,60,60,60,60,60,57,74,74,50,60,60,60,60,60,60,51,0,51,0,51,48,49,77,51,51,51,52,51,61,52,51,51,51,62,49,57,57,51,51,51,51,51,51,63,51,51,51,63,51,51,78,86,51,51,51,0,61,0,0,0,57,72,51,51,0,51,85,57,57,57,51,64,87,88,64,89,61,62,0,57,57,0,51,52,51,51,51,51,57,51,51,57,73,51,65,65,65,65,65,65,65,65,57,73,73,51,49,65,65,65,65,65,65,57,57,51,48,49,48,49,48,49,57,57,90,91,92,93,94,95,0,62,0,0,0,63,96,63,97,0,0,0,0,68,0,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,65,65,65,65,65,65,65,65,65,65,65,65,65,65,75,75,75,75,75,75,75,75,75,75,0,0,0,75,75,75,75,75,75,75,75,75,0,51,98,51,51,51,51,51,51,51,51,51,51,98,98,51,98,51,51,51,51,98,51,51,51,51,51,98,51,98,51,98,51,98,51,51,98,51,98,51,98,51,98,51,98,51,98,98,51,51,51,51,51,51,51,98,98,51,51,98,98,51,98,51,51,98,51,98,51,98,51,51,51,98,51,98,51,98,51,98,51,51,51,51,51,51,98,51,98,51,99,51,98,0,0,76,0,79,0,61,62,0,61,61,62,0,62,0,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,0,0,0,0,0,0,0,0,73,74,0,0,0,74,74,74,73,73,73,0,0,0,0,0,0,0,0,53,54,55,81,82,83,84,56,0,0,80,80,80,85,85,85,0,77,77,0,0,78,78,86,0,0,0,100,101,102,0,0,0,0,64,87,88,64,89,0,0,0,0,0,0,90,91,92,93,94,95,72,0,0,0,72,0,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,0,0,0,52,0,52,52,52,0,52],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[1,1],[2],[[]],[[]],[[]],[[1,1],1],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[1,3],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,8],1],[[1,8],1],[[1,7],1],[[1,9],1],[[1,4],1],[[1,10],1],[[1,4],1],[[1,3],1],[[1,11],1],[[1,11],1],[[1,11],1],[[1,1],1],[[1,9],1],[[1,5],1],[[1,9],1],[[1,3],1],[[1,1],1],[[1,12],1],[[1,1],1],[[1,13],1],[[1,14],1],[[1,6],1],[[1,10],1],[[1,7],1],[[1,7],1],[[1,6],1],[[1,8],1],[[1,4],1],[[1,13],1],[[1,5],1],[[1,9],1],[[1,13],1],[[1,12],1],[[1,11],1],[[1,8],1],[[1,14],1],[[1,12],1],[[1,10],1],[[1,5],1],[[1,14],1],[[1,1],1],[[1,12],1],[[1,14],1],[[1,3],1],[[1,10],1],[[1,6],1],[[1,13],1],[[2,2]],[2],[2],[2],[[2,2]],[[2,2]],[2],[[2,2]],[[15,6],15],[[15,14],15],[[15,15],15],[[15,8],15],[[15,3],15],[[15,3],15],[[15,14],15],[[15,15],15],[[15,6],15],[[15,11],15],[[15,4],15],[[15,8],15],[[15,6],15],[[15,15],15],[[15,8],15],[[15,4],15],[[15,14],15],[[15,4],15],[[15,15],15],[[15,14],15],[[15,6],15],[[15,3],15],[[15,11],15],[[15,11],15],[[15,8],15],[[15,11],15],[[15,4],15],[[15,3],15],[[1,5]],[[1,7]],[[1,1]],[[1,13]],[[1,3]],[[1,14]],[[1,4]],[[1,12]],[[1,8]],[[1,1]],[[1,9]],[[1,11]],[[1,6]],[[1,10]],[2],[[2,2]],[[2,2]],[2],[[15,8]],[[15,4]],[[15,6]],[[15,15]],[[15,11]],[[15,3]],[[15,15]],[[15,14]],[2],[2],[2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[1,16]],[15],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[[]],[[]],[[]],0,[[1,11],17],[[15,11],17],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[1,11],[15,11],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[15,15],15],[[15,15],15],[[15,15],15],[[15,15],15],[[1,1]],[[1,1]],[[15,15]],[[15,15]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],18],[[]],[1,1],[1,1],[2,2],[2,2],[15,15],[15,15],[[]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[1,1],18],[[15,15],18],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[6,18],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],18],[[1,1],[[18,[1]]]],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[],2],[[]],[[]],[[],19],[1,1],[2,2],[15,15],[[1,1]],[[15,15]],[[]],[[]],[[]],[[1,1],20],[[15,15],20],0,[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[],3],[15,11],[[],3],[[]],[1],[15],[[],1],[[],2],[[],15],[[1,3],1],[[1,3],1],[[1,6],1],[[1,14],1],[[1,6],1],[[1,14],1],[[1,11],1],[[1,13],1],[[1,3],1],[[1,9],1],[[1,12],1],[[1,12],1],[[1,11],1],[[1,1],1],[[1,4],1],[[1,4],1],[[1,12],1],[[1,13],1],[[1,10],1],[[1,11],1],[[1,1],1],[[1,5],1],[[1,14],1],[[1,5],1],[[1,12],1],[[1,14],1],[[1,1],1],[[1,1],1],[[1,5],1],[[1,9],1],[[1,7],1],[[1,4],1],[[1,9],1],[[1,13],1],[[1,8],1],[[1,8],1],[[1,7],1],[[1,10],1],[[1,11],1],[[1,7],1],[[1,8],1],[[1,5],1],[[1,13],1],[[1,4],1],[[1,3],1],[[1,6],1],[[1,6],1],[[1,10],1],[[1,9],1],[[1,7],1],[[1,8],1],[[1,10],1],[2],[2],[[2,2]],[[2,2]],[2],[2],[[2,2]],[[2,2]],[[15,15],15],[[15,3],15],[[15,11],15],[[15,3],15],[[15,14],15],[[15,8],15],[[15,8],15],[[15,14],15],[[15,6],15],[[15,6],15],[[15,14],15],[[15,3],15],[[15,15],15],[[15,4],15],[[15,3],15],[[15,15],15],[[15,11],15],[[15,11],15],[[15,8],15],[[15,4],15],[[15,11],15],[[15,4],15],[[15,6],15],[[15,14],15],[[15,4],15],[[15,15],15],[[15,8],15],[[15,6],15],[[1,6]],[[1,14]],[[1,13]],[[1,3]],[[1,10]],[[1,1]],[[1,11]],[[1,8]],[[1,1]],[[1,9]],[[1,4]],[[1,7]],[[1,5]],[[1,12]],[[2,2]],[[2,2]],[2],[2],[[15,15]],[[15,8]],[[15,3]],[[15,4]],[[15,14]],[[15,15]],[[15,6]],[[15,11]],[[]],[[1,1],1],[[15,15],15],[[1,1],1],[[15,15],15],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1]],[[15,15]],[[]],[[1,1]],[[15,15]],[[1,1]],[[15,15]],[[],17],[[1,1],17],[[15,15],17],[[]],[[1,1],17],[[2,2],17],[[15,15],17],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[],21],[[]],[[1,1]],[[2,2],2],[2,2],[[]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[1,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[2,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[15,22],[[24,[23]]]],[[]],[[],18],[15,1],[14,1],[[]],[17,1],[5,1],[12,1],[10,1],[3,1],[6,1],[4,1],[9,1],[11,1],[8,1],[7,1],[13,1],[[]],[[],2],[[],2],[[],[[18,[2]]]],[8,15],[17,15],[3,15],[4,15],[11,15],[[]],[14,15],[6,15],[[]],[[],1],[[],15],[[16,15],1],[16,1],[[],15],[16,1],[[],15],[25,18],[25,[[18,[2]]]],[26,18],[26,[[18,[1]]]],[26,[[18,[2]]]],[26,[[18,[15]]]],[12,18],[12,[[18,[1]]]],[12,[[18,[2]]]],[12,[[18,[15]]]],[10,18],[10,[[18,[2]]]],[9,18],[9,[[18,[2]]]],[5,18],[5,[[18,[1]]]],[5,[[18,[2]]]],[5,[[18,[15]]]],[7,18],[7,[[18,[2]]]],[13,18],[13,[[18,[2]]]],[[]],[[],1],[[],15],[[],2],[[16,3],[[18,[1]]]],[3,[[18,[15]]]],[[16,3],[[18,[1]]]],[3,[[18,[15]]]],[[],1],[[],1],[16,1],[[],15],[27,[[24,[1,28]]]],[27,[[24,[2]]]],[27,[[24,[15,28]]]],[[27,3],24],[[27,3],[[24,[1,28]]]],[[27,3],[[24,[2]]]],[[27,3],[[24,[15,28]]]],[8,18],[8,[[18,[1]]]],[8,[[18,[2]]]],[8,[[18,[15]]]],[4,18],[4,[[18,[2]]]],[3,18],[3,[[18,[2]]]],[11,18],[11,[[18,[1]]]],[11,[[18,[2]]]],[11,[[18,[15]]]],[14,18],[14,[[18,[2]]]],[6,18],[6,[[18,[2]]]],[[]],[[1,1],1],[[15,15],15],[[]],[[1,1]],[[15,15]],[1],[2],[15],[[]],[[],2],[2],0,[[]],[1],[15],[[]],0,[[]],[[]],[[]],[[]],[1],[2],[2,2],[2],[[],17],[1,17],[15,17],[[],17],[2,17],[2,17],[[],17],[2,17],[2,17],[[],17],[[1,1],17],[[15,15],17],[[],17],[2,17],[2,17],[[],17],[1,17],[[],17],[2,17],[2,17],[[],17],[1,17],[15,17],[[],17],[1,17],[2,17],[15,17],[[],17],[1,17],[[],17],[[],17],[[],17],[[],17],[1,17],[2,17],[15,17],0,[1,29],[15,29],[1,30],[15,30],[2],[2],[[]],[[1,1],1],[[15,15],15],[[],3],[[],3],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[1,15],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,1],1],[[15,15],15],[[1,1],[[18,[1]]]],[[15,15],[[18,[15]]]],[[1,1,1],1],[[15,15,15],15],[[1,3],1],[[1,13],1],[[1,13],1],[[1,11],1],[[1,4],1],[[1,11],1],[[1,5],1],[[1,9],1],[[1,13],1],[[1,10],1],[[1,3],1],[[1,4],1],[[1,6],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,14],1],[[1,14],1],[[1,1],1],[[1,5],1],[[1,7],1],[[1,7],1],[[1,10],1],[[1,7],1],[[1,10],1],[[1,7],1],[[1,1],1],[[1,3],1],[[1,8],1],[[1,8],1],[[1,9],1],[[1,1],1],[[1,6],1],[[1,11],1],[[1,12],1],[[1,6],1],[[1,14],1],[[1,5],1],[[1,12],1],[[1,11],1],[[1,4],1],[[1,4],1],[[1,3],1],[[1,5],1],[[1,12],1],[[1,14],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,8],1],[[1,10],1],[[1,13],1],[[2,2]],[[2,2]],[[2,2]],[2],[2],[[2,2]],[2],[2],[[15,15],15],[[15,3],15],[[15,6],15],[[15,8],15],[[15,15],15],[[15,14],15],[[15,3],15],[[15,14],15],[[15,11],15],[[15,3],15],[[15,6],15],[[15,6],15],[[15,11],15],[[15,15],15],[[15,15],15],[[15,3],15],[[15,6],15],[[15,14],15],[[15,8],15],[[15,11],15],[[15,4],15],[[15,8],15],[[15,4],15],[[15,8],15],[[15,14],15],[[15,4],15],[[15,4],15],[[15,11],15],[[]],[[2,2,2],2],[[2,2,2],2],[[2,2,2]],[[2,2,2]],[[1,4]],[[1,11]],[[1,10]],[[1,1]],[[1,3]],[[1,6]],[[1,7]],[[1,14]],[[1,12]],[[1,8]],[[1,1]],[[1,13]],[[1,9]],[[1,5]],[2],[[2,2]],[[2,2]],[2],[[15,15]],[[15,4]],[[15,14]],[[15,3]],[[15,8]],[[15,6]],[[15,15]],[[15,11]],[[]],[1,1],[1,1],[2],[2],[[]],[[]],[[16,[32,[3,31]]],1],[[],2],[[[32,[3,31]]],15],[[]],[[1,1],1],[[15,15],15],[2],[2],[1,1],[1,1],[[1,3],1],[[1,3],1],[[15,3],15],[[15,3],15],[[]],[[]],[[],1],[[],2],[[],15],[3,[[18,[1]]]],[3,[[18,[15]]]],[[1,1],[[18,[20]]]],[[15,15],[[18,[20]]]],0,[6],[3],[[1,6],1],[[1,11],1],[[1,4],1],[[1,8],1],[[1,15],1],[[1,8],1],[[1,3],1],[[1,14],1],[[1,3],1],[[1,15],1],[[1,11],1],[[1,15],1],[[1,6],1],[[1,14],1],[[1,8],1],[[1,6],1],[[1,6],1],[[1,4],1],[[1,11],1],[[1,11],1],[[1,15],1],[[1,4],1],[[1,3],1],[[1,3],1],[[1,8],1],[[1,14],1],[[1,14],1],[[1,4],1],[[1,3],1],[[2,6]],[[2,4]],[[2,12]],[[2,3]],[[2,7]],[[2,25]],[[2,5]],[[2,26]],[[2,7]],[[2,10]],[[2,13]],[[2,9]],[[2,2]],[[2,11]],[[2,14]],[[2,26]],[[2,8]],[[2,12]],[[2,9]],[[2,6]],[[2,2]],[[2,2]],[[2,3]],[[2,26]],[[2,2]],[[2,11]],[[2,14]],[[2,13]],[[2,10]],[[2,4]],[[2,25]],[[2,5]],[[2,26]],[[2,8]],[[2,25]],[[2,25]],[[15,3],15],[[15,11],15],[[15,3],15],[[15,14],15],[[15,3],15],[[15,4],15],[[15,11],15],[[15,11],15],[[15,8],15],[[15,15],15],[[15,3],15],[[15,15],15],[[15,6],15],[[15,8],15],[[15,14],15],[[15,4],15],[[15,15],15],[[15,15],15],[[15,4],15],[[15,6],15],[[15,8],15],[[15,4],15],[[15,6],15],[[15,14],15],[[15,14],15],[[15,3],15],[[15,8],15],[[15,6],15],[[15,11],15],[[2,2],2],[[2,2],2],[[]],[2,2],[2,2],[9],[[2,9],2],[[2,9],2],[[2,3],2],[[]],[[1,1],1],[[15,15],15],[[],1],[[],2],[[],2],[[],15],[[],33],[[],34],[[],35],[[],36],0,[2],0,[[]],[2,2],[[1,3],1],[[1,5],1],[[1,9],1],[[1,14],1],[[1,8],1],[[1,14],1],[[1,4],1],[[1,12],1],[[1,3],1],[[1,10],1],[[1,12],1],[[1,10],1],[[1,1],1],[[1,6],1],[[1,12],1],[[1,14],1],[[1,13],1],[[1,8],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,8],1],[[1,11],1],[[1,10],1],[[1,12],1],[[1,1],1],[[1,13],1],[[1,9],1],[[1,11],1],[[1,7],1],[[1,7],1],[[1,11],1],[[1,10],1],[[1,5],1],[[1,14],1],[[1,13],1],[[1,13],1],[[1,4],1],[[1,6],1],[[1,7],1],[[1,1],1],[[1,5],1],[[1,9],1],[[1,8],1],[[1,7],1],[[1,1],1],[[1,4],1],[[1,9],1],[[1,11],1],[[1,3],1],[[1,3],1],[[1,6],1],[2],[2],[2],[[2,2]],[[2,2]],[[2,2]],[[2,2]],[2],[[15,6],15],[[15,15],15],[[15,6],15],[[15,3],15],[[15,8],15],[[15,4],15],[[15,3],15],[[15,15],15],[[15,14],15],[[15,6],15],[[15,15],15],[[15,11],15],[[15,4],15],[[15,11],15],[[15,14],15],[[15,4],15],[[15,11],15],[[15,15],15],[[15,11],15],[[15,6],15],[[15,8],15],[[15,4],15],[[15,3],15],[[15,14],15],[[15,14],15],[[15,3],15],[[15,8],15],[[15,8],15],[[1,9]],[[1,8]],[[1,1]],[[1,10]],[[1,5]],[[1,14]],[[1,11]],[[1,1]],[[1,7]],[[1,12]],[[1,3]],[[1,13]],[[1,4]],[[1,6]],[2],[[2,2]],[2],[[2,2]],[[15,15]],[[15,6]],[[15,4]],[[15,11]],[[15,3]],[[15,15]],[[15,14]],[[15,8]],[[1,1],1],[[15,15],15],[[]],[3],[3],[[]],[[]],[[]],[2,2],[[1,11,17]],[[15,11,17]],[[]],[1],[2],[15],[[]],[1],[2],[15],[[1,13],1],[[1,14],1],[[1,7],1],[[1,4],1],[[1,10],1],[[1,8],1],[[1,8],1],[[1,4],1],[[1,14],1],[[1,10],1],[[1,9],1],[[1,12],1],[[1,8],1],[[1,9],1],[[1,12],1],[[1,3],1],[[1,11],1],[[1,3],1],[[1,10],1],[[1,7],1],[[1,7],1],[[1,13],1],[[1,6],1],[[1,6],1],[[1,5],1],[[1,9],1],[[1,5],1],[[1,5],1],[[1,6],1],[[1,11],1],[[1,3],1],[[1,14],1],[[1,5],1],[[1,8],1],[[1,7],1],[[1,14],1],[[1,4],1],[[1,10],1],[[1,12],1],[[1,13],1],[[1,13],1],[[1,4],1],[[1,6],1],[[1,9],1],[[1,11],1],[[1,11],1],[[1,12],1],[[1,3],1],[[15,6],15],[[15,11],15],[[15,6],15],[[15,4],15],[[15,12],15],[[15,12],15],[[15,13],15],[[15,3],15],[[15,7],15],[[15,13],15],[[15,7],15],[[15,7],15],[[15,8],15],[[15,7],15],[[15,12],15],[[15,9],15],[[15,3],15],[[15,10],15],[[15,12],15],[[15,8],15],[[15,3],15],[[15,14],15],[[15,14],15],[[15,9],15],[[15,11],15],[[15,8],15],[[15,13],15],[[15,5],15],[[15,3],15],[[15,13],15],[[15,10],15],[[15,5],15],[[15,10],15],[[15,14],15],[[15,4],15],[[15,9],15],[[15,6],15],[[15,4],15],[[15,9],15],[[15,4],15],[[15,8],15],[[15,14],15],[[15,11],15],[[15,6],15],[[15,11],15],[[15,5],15],[[15,5],15],[[15,10],15],[[1,6]],[[1,8]],[[1,11]],[[1,9]],[[1,8]],[[1,7]],[[1,12]],[[1,12]],[[1,4]],[[1,6]],[[1,10]],[[1,3]],[[1,14]],[[1,10]],[[1,13]],[[1,11]],[[1,13]],[[1,5]],[[1,9]],[[1,3]],[[1,7]],[[1,5]],[[1,14]],[[1,4]],[[15,12]],[[15,14]],[[15,5]],[[15,5]],[[15,4]],[[15,11]],[[15,9]],[[15,3]],[[15,13]],[[15,3]],[[15,8]],[[15,9]],[[15,13]],[[15,10]],[[15,7]],[[15,8]],[[15,14]],[[15,4]],[[15,7]],[[15,6]],[[15,6]],[[15,10]],[[15,12]],[[15,11]],[[1,9],1],[[1,8],1],[[1,3],1],[[1,13],1],[[1,5],1],[[1,13],1],[[1,7],1],[[1,5],1],[[1,10],1],[[1,3],1],[[1,7],1],[[1,8],1],[[1,5],1],[[1,4],1],[[1,6],1],[[1,10],1],[[1,14],1],[[1,11],1],[[1,8],1],[[1,9],1],[[1,5],1],[[1,4],1],[[1,10],1],[[1,14],1],[[1,8],1],[[1,9],1],[[1,7],1],[[1,9],1],[[1,13],1],[[1,13],1],[[1,3],1],[[1,12],1],[[1,6],1],[[1,12],1],[[1,11],1],[[1,6],1],[[1,4],1],[[1,3],1],[[1,12],1],[[1,11],1],[[1,12],1],[[1,4],1],[[1,11],1],[[1,10],1],[[1,7],1],[[1,14],1],[[1,14],1],[[1,6],1],[[15,4],15],[[15,8],15],[[15,11],15],[[15,4],15],[[15,7],15],[[15,5],15],[[15,3],15],[[15,12],15],[[15,14],15],[[15,6],15],[[15,10],15],[[15,6],15],[[15,14],15],[[15,13],15],[[15,11],15],[[15,8],15],[[15,6],15],[[15,8],15],[[15,5],15],[[15,3],15],[[15,14],15],[[15,4],15],[[15,6],15],[[15,14],15],[[15,10],15],[[15,10],15],[[15,7],15],[[15,11],15],[[15,5],15],[[15,13],15],[[15,11],15],[[15,13],15],[[15,9],15],[[15,8],15],[[15,12],15],[[15,9],15],[[15,10],15],[[15,9],15],[[15,3],15],[[15,13],15],[[15,7],15],[[15,4],15],[[15,12],15],[[15,7],15],[[15,9],15],[[15,5],15],[[15,12],15],[[15,3],15],[[1,8]],[[1,7]],[[1,7]],[[1,12]],[[1,3]],[[1,11]],[[1,14]],[[1,6]],[[1,10]],[[1,13]],[[1,3]],[[1,9]],[[1,5]],[[1,4]],[[1,10]],[[1,8]],[[1,6]],[[1,14]],[[1,9]],[[1,11]],[[1,5]],[[1,12]],[[1,4]],[[1,13]],[[15,11]],[[15,7]],[[15,6]],[[15,8]],[[15,8]],[[15,14]],[[15,10]],[[15,9]],[[15,7]],[[15,10]],[[15,11]],[[15,3]],[[15,5]],[[15,12]],[[15,4]],[[15,5]],[[15,9]],[[15,14]],[[15,12]],[[15,6]],[[15,3]],[[15,13]],[[15,4]],[[15,13]],[1,16],[3],[3],[[]],[[]],[[]],[1,1],[[]],[2,2],[2,2],[[]],[[]],[2,2],[2,2],[[]],[1,1],[1,1],[2,2],[2,2],[15,15],[15,15],[[1,9],1],[[1,3],1],[[1,12],1],[[1,11],1],[[1,8],1],[[1,4],1],[[1,11],1],[[1,4],1],[[1,11],1],[[1,12],1],[[1,7],1],[[1,10],1],[[1,4],1],[[1,14],1],[[1,5],1],[[1,10],1],[[1,13],1],[[1,1],1],[[1,14],1],[[1,12],1],[[1,4],1],[[1,7],1],[[1,1],1],[[1,8],1],[[1,1],1],[[1,8],1],[[1,3],1],[[1,1],1],[[1,9],1],[[1,13],1],[[1,9],1],[[1,10],1],[[1,6],1],[[1,7],1],[[1,14],1],[[1,6],1],[[1,5],1],[[1,9],1],[[1,7],1],[[1,12],1],[[1,6],1],[[1,5],1],[[1,5],1],[[1,11],1],[[1,3],1],[[1,14],1],[[1,13],1],[[1,3],1],[[1,10],1],[[1,6],1],[[1,13],1],[[1,8],1],[2],[2],[[2,2]],[[2,2]],[[2,2]],[2],[[2,2]],[2],[[15,14],15],[[15,14],15],[[15,15],15],[[15,14],15],[[15,6],15],[[15,6],15],[[15,3],15],[[15,4],15],[[15,15],15],[[15,3],15],[[15,6],15],[[15,11],15],[[15,4],15],[[15,11],15],[[15,15],15],[[15,4],15],[[15,11],15],[[15,4],15],[[15,15],15],[[15,11],15],[[15,8],15],[[15,3],15],[[15,8],15],[[15,8],15],[[15,6],15],[[15,14],15],[[15,3],15],[[15,8],15],[[1,10]],[[1,13]],[[1,14]],[[1,8]],[[1,11]],[[1,3]],[[1,12]],[[1,1]],[[1,7]],[[1,5]],[[1,6]],[[1,1]],[[1,9]],[[1,4]],[2],[[2,2]],[[2,2]],[2],[[15,4]],[[15,11]],[[15,15]],[[15,6]],[[15,3]],[[15,15]],[[15,8]],[[15,14]],[[],1],[[],2],[[],2],[[],15],[[]],[[]],[2,2],[2,2],[[]],[2,2],[2,2],[[]],[1],[15],[1,[[18,[1]]]],[15,[[18,[1]]]],[1,[[18,[15]]]],[1,[[18,[15]]]],[15,[[18,[15]]]],[1],[15,[[32,[14,31]]]],[1],[15,[[32,[14,31]]]],[[]],[[],[[18,[25]]]],[1,[[18,[25]]]],[2,[[18,[25]]]],[15,[[18,[25]]]],[[],[[18,[26]]]],[1,[[18,[26]]]],[2,[[18,[26]]]],[15,[[18,[26]]]],[[],[[18,[12]]]],[1,[[18,[12]]]],[2,[[18,[12]]]],[15,[[18,[12]]]],[[],[[18,[10]]]],[2,[[18,[10]]]],[[],[[18,[9]]]],[2,[[18,[9]]]],[[],[[18,[5]]]],[1,[[18,[5]]]],[2,[[18,[5]]]],[15,[[18,[5]]]],[[],[[18,[7]]]],[2,[[18,[7]]]],[[],[[18,[13]]]],[2,[[18,[13]]]],[[]],[1],[15],[[]],[[]],[[]],[2],[[]],[[1,3]],[[15,3],[[32,[14,31]]]],[[1,3]],[[15,3],[[32,[14,31]]]],[1,[[32,[14,31]]]],[1,[[32,[14,31]]]],[[1,3],37],[[15,3],37],[[],37],[[],37],[[],37],[[],[[18,[8]]]],[1,[[18,[8]]]],[2,[[18,[8]]]],[15,[[18,[8]]]],[[],[[18,[4]]]],[2,[[18,[4]]]],[[],[[18,[3]]]],[2,[[18,[3]]]],[1],[15,[[32,[3,31]]]],[[],[[18,[11]]]],[1,[[18,[11]]]],[2,[[18,[11]]]],[15,[[18,[11]]]],[1],[15,[[32,[11,31]]]],[[],[[18,[14]]]],[2,[[18,[14]]]],[[],[[18,[6]]]],[2,[[18,[6]]]],[[],3],[15,11],[[],3],[1,[[18,[11]]]],[15,[[18,[11]]]],0,[[]],[[],24],[[],24],[9,[[24,[15,38]]]],[12,[[24,[15,38]]]],[1,[[24,[15,38]]]],[1,[[24,[15,[38,[1]]]]]],[7,[[24,[15,38]]]],[5,[[24,[15,38]]]],[[],24],[10,[[24,[15,38]]]],[13,[[24,[15,38]]]],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[2,2],[3],[3],[[]],[[]],[[],1],[[],2],[[],15],0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[28,28],[38,38],[[]],[[]],[[]],[[16,16],20],[29,6],[30,6],[28,27],[38,27],[[16,16],17],[[28,28],17],[[38,38],17],[[16,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[28,22],[[24,[23]]]],[[38,22],[[24,[23]]]],[[38,22],[[24,[23]]]],[[]],[[]],[[]],[[]],[[]],[16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[38],[29,[[18,[3]]]],[30,[[18,[11]]]],[29,6],[30,6],[[16,16],16],[16,16],[29,[[18,[3]]]],[30,[[18,[11]]]],[29,18],[30,18],[[30,6],[[18,[11]]]],[[16,16],[[18,[20]]]],[40],[40],[29],[30],[[],[[18,[1]]]],[[],[[18,[15]]]],[[]],[[]],[[]],[[],37],[[],37],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,0,0,[[]],[[],18],[[],18],[25,18],[26,18],[12,18],[10,18],[9,18],[5,18],[7,18],[13,18],[8,18],[4,18],[3,18],[11,18],[14,18],[6,18],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[12]]]],[[],[[18,[10]]]],[[],[[18,[9]]]],[[],[[18,[5]]]],[[],[[18,[7]]]],[[],[[18,[13]]]],[[],[[18,[8]]]],[[],[[18,[4]]]],[[],[[18,[3]]]],[[],[[18,[11]]]],[[],[[18,[14]]]],[[],[[18,[6]]]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[2,[25]]]],[[],[[2,[26]]]],[[]],[[]],[[]],[[]],[41,27],[[41,41],17],[[]],[[]],[[]],[[41,22],[[24,[23]]]],[[41,22],[[24,[23]]]],[[]],[[]],0,[[]],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],[9],[40],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],37],[[],24],[[],24],[[],39],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[21,21],17],[[],21],[[]],[[21,22],[[24,[23]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[],42],[42,18],[[]],[3],[3],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,33],[34,34],[35,35],[36,36],[43,43],[44,44],[[]],[[]],[[]],[[]],[[]],[[]],[33,45],[34,45],[43,45],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[33,18],[34,18],[35,18],[36,18],[43,18],[44,18],[33,18],[34,18],[[],33],[[],43],[[],34],[[],35],[[],44],[[],36],[33],[34],[43],[44],[33,45],[34,45],[43,45],[[]],[[]],[[]],[[]],[[]],[[]],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],39],[[],39],[[],39],[[],39],0,0,[6,18],[6],[[]],0,0,0,0,0,0,0,0,[46,46],[[46,46],46],[46,46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[46,46],[[46,46],46],[46,46],[46],[[46,46]],[46],[[46,46]],[[],[[18,[46]]]],[[],[[18,[46]]]],[[]],[[]],[[]],[[]],[46,46],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[[46,46],[[18,[46]]]],[46,46],[47,47],[[]],[[]],[[46,46],20],[[],46],[46],[47,27],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[46,46],[46,46],[[46,46],46],[46,46],[[46,46]],[46],[[46,46]],[46],[[46,46],17],[[47,47],17],[46,46],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[46,22],[[24,[23]]]],[[47,22],[[24,[23]]]],[[47,22],[[24,[23]]]],[46,46],[[],46],[[]],[[],46],[[]],[25,[[18,[[46,[14]]]]]],[25,[[18,[[46,[1]]]]]],[25,[[18,[[46,[10]]]]]],[25,[[18,[[46,[9]]]]]],[25,[[18,[[46,[13]]]]]],[25,[[18,[[46,[3]]]]]],[25,[[18,[[46,[6]]]]]],[25,[[18,[[46,[11]]]]]],[25,[[18,[[46,[12]]]]]],[25,[[18,[[46,[8]]]]]],[25,[[18,[[46,[5]]]]]],[25,[[18,[[46,[4]]]]]],[25,[[18,[[46,[7]]]]]],[26,[[18,[[46,[11]]]]]],[26,[[18,[[46,[14]]]]]],[26,[[18,[[46,[10]]]]]],[26,[[18,[[46,[5]]]]]],[26,[[18,[[46,[4]]]]]],[26,[[18,[[46,[9]]]]]],[26,[[18,[[46,[7]]]]]],[26,[[18,[[46,[8]]]]]],[26,[[18,[[46,[12]]]]]],[26,[[18,[[46,[3]]]]]],[26,[[18,[[46,[13]]]]]],[26,[[18,[[46,[1]]]]]],[26,[[18,[[46,[6]]]]]],[[],[[18,[[46,[1]]]]]],[12,[[18,[[46,[8]]]]]],[12,[[18,[[46,[4]]]]]],[12,[[18,[[46,[9]]]]]],[12,[[18,[[46,[1]]]]]],[12,[[18,[[46,[13]]]]]],[12,[[18,[[46,[12]]]]]],[12,[[18,[[46,[3]]]]]],[12,[[18,[[46,[11]]]]]],[12,[[18,[[46,[5]]]]]],[12,[[18,[[46,[10]]]]]],[12,[[18,[[46,[7]]]]]],[12,[[18,[[46,[14]]]]]],[12,[[18,[[46,[6]]]]]],[5,[[18,[[46,[12]]]]]],[5,[[18,[[46,[1]]]]]],[5,[[18,[[46,[10]]]]]],[5,[[18,[[46,[8]]]]]],[5,[[18,[[46,[3]]]]]],[5,[[18,[[46,[4]]]]]],[5,[[18,[[46,[14]]]]]],[5,[[18,[[46,[7]]]]]],[5,[[18,[[46,[11]]]]]],[5,[[18,[[46,[5]]]]]],[5,[[18,[[46,[6]]]]]],[5,[[18,[[46,[13]]]]]],[5,[[18,[[46,[9]]]]]],[[],46],[27,[[24,[46,47]]]],[[27,3],[[24,[46,47]]]],[8,[[18,[[46,[9]]]]]],[8,[[18,[[46,[12]]]]]],[8,[[18,[[46,[6]]]]]],[8,[[18,[[46,[10]]]]]],[8,[[18,[[46,[3]]]]]],[8,[[18,[[46,[4]]]]]],[8,[[18,[[46,[8]]]]]],[8,[[18,[[46,[7]]]]]],[8,[[18,[[46,[14]]]]]],[8,[[18,[[46,[5]]]]]],[8,[[18,[[46,[13]]]]]],[8,[[18,[[46,[11]]]]]],[8,[[18,[[46,[1]]]]]],[11,[[18,[[46,[7]]]]]],[11,[[18,[[46,[5]]]]]],[11,[[18,[[46,[6]]]]]],[11,[[18,[[46,[3]]]]]],[11,[[18,[[46,[8]]]]]],[11,[[18,[[46,[4]]]]]],[11,[[18,[[46,[14]]]]]],[11,[[18,[[46,[13]]]]]],[11,[[18,[[46,[11]]]]]],[11,[[18,[[46,[12]]]]]],[11,[[18,[[46,[1]]]]]],[11,[[18,[[46,[9]]]]]],[11,[[18,[[46,[10]]]]]],[46],[[]],[[]],[46],[46,46],[46,46],[46,17],[46,17],[46,17],[46,17],[46,17],[46,46],[[46,46],46],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[46,46],[46,46],[46],[[46,46]],[46],[[46,46]],[46,46],[46,46],[[],46],[[],46],[46],[[],46],[[46,46],[[18,[20]]]],[[46,8],46],[[46,12],46],[[46,9],46],[[46,5],46],[[46,12],46],[[46,4],46],[[46,15],46],[[46,4],46],[[46,13],46],[[46,7],46],[[46,13],46],[[46,8],46],[[46,11],46],[[46,1],46],[[46,12],46],[[46,4],46],[[46,1],46],[[46,14],46],[[46,8],46],[[46,8],46],[[46,7],46],[[46,9],46],[[46,9],46],[[46,10],46],[[46,15],46],[[46,12],46],[[46,4],46],[[46,3],46],[[46,5],46],[[46,9],46],[[46,10],46],[[46,14],46],[[46,13],46],[[46,6],46],[[46,3],46],[[46,3],46],[[46,7],46],[[46,5],46],[[46,15],46],[[46,6],46],[[46,1],46],[[46,11],46],[[46,14],46],[[46,13],46],[[46,11],46],[[46,5],46],[[46,15],46],[[46,3],46],[[46,11],46],[[46,10],46],[[46,14],46],[[46,7],46],[[46,9],46],[[46,1],46],[[46,10],46],[[46,6],46],[[46,6],46],[[],46],[[],46],[40],[46,46],[46,46],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[46,46],[46,46],[46,46],[[46,46]],[46],[[46,46]],[46],[46,46],[46],[46],[46,46],[46,46],[46,46],[46,46],[[46,46],46],[[46,46],46],[[46,46],46],[46,46],[[46,46],46],[[46,46]],[46],[46],[[46,46]],[[],46],[[],46],[46,[[18,[26]]]],[46,[[18,[12]]]],[46,[[18,[5]]]],[46],[[]],[[]],[[],37],[[],37],[46,[[18,[8]]]],[46,[[18,[11]]]],[46,46],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[[],46],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],0,0,0,0,[[]],0,0,0,0,0,[[]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],18],[[]],[[]],[[],18],[[],18],[[],18],[[],18],[[],18],[[],18],[6,18],[[],18],[[],18],[3,18],[3,18],[[],18],[[]],[[]],[[]],[[]],[[],19],[[]],[[]],[[]],[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[48,22],[[24,[23]]]],[[49,22],[[24,[23]]]],[[49,22],[[24,[23]]]],[[]],[[],18],[[]],[[]],[[]],[[]],[25,18],[26,18],[12,18],[10,18],[9,18],[5,18],[7,18],[13,18],[[]],[[]],[[]],[[27,3],24],[8,18],[4,18],[3,18],[11,18],[14,18],[6,18],[[]],0,[[]],0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[],3],[[],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[6],[3],[[]],[[]],[9],0,[[]],[[]],[[]],[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[3],[3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[12]]]],[[],[[18,[10]]]],[[],[[18,[9]]]],[[],[[18,[5]]]],[[],[[18,[7]]]],[[],[[18,[13]]]],[[]],[[]],[[]],[[]],[[],37],[[],[[18,[8]]]],[[],[[18,[4]]]],[[],[[18,[3]]]],[[],[[18,[11]]]],[[],[[18,[14]]]],[[],[[18,[6]]]],[[],3],[[],3],[[]],[[],24],[[],24],[[],24],[[],24],[[],39],[[],39],[3],[3],[[]],[[]],[[]],[3],[3],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[],18],[[],18],[25,18],[26,18],[12,18],[10,18],[9,18],[5,18],[7,18],[13,18],[8,18],[4,18],[3,18],[11,18],[14,18],[6,18],[[],[[18,[25]]]],[[],[[18,[26]]]],[[],[[18,[12]]]],[[],[[18,[10]]]],[[],[[18,[9]]]],[[],[[18,[5]]]],[[],[[18,[7]]]],[[],[[18,[13]]]],[[],[[18,[8]]]],[[],[[18,[4]]]],[[],[[18,[3]]]],[[],[[18,[11]]]],[[],[[18,[14]]]],[[],[[18,[6]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[]],[[]],0,0,0,0,0,0,[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],3],[[],3],[[]],[[]],[[],3],[[],3],[3],[[]],[3],[3],[3],[3],[[]],[[]],[[]],[[],3],[[],3],[3],[3],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],18],[[],18],[[],18],[[],18],[[],18],[3,18],[3,18],[[],18],0,0,[[],18],[[],18],[[],18],[[]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[3],[3],[[]],0,0,[6,18],[6],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],17],[[],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[]],[[]],[[]],[[]],[[],17],[[],17],[[]],[[]]],"p":[[3,"BigInt"],[3,"Complex"],[15,"u32"],[15,"u16"],[15,"i64"],[15,"usize"],[15,"i8"],[15,"u128"],[15,"i32"],[15,"i16"],[15,"u64"],[15,"i128"],[15,"isize"],[15,"u8"],[3,"BigUint"],[4,"Sign"],[15,"bool"],[4,"Option"],[4,"FpCategory"],[4,"Ordering"],[3,"ExtendedGcd"],[3,"Formatter"],[3,"Error"],[4,"Result"],[15,"f32"],[15,"f64"],[15,"str"],[3,"ParseBigIntError"],[3,"U32Digits"],[3,"U64Digits"],[3,"Global"],[3,"Vec"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"String"],[3,"TryFromBigIntError"],[3,"TypeId"],[3,"Demand"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[3,"Ratio"],[3,"ParseRatioError"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"Num"],[8,"Float"],[8,"Signed"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedSub"],[8,"PrimInt"],[8,"Integer"],[8,"NumCast"],[8,"FromPrimitive"],[8,"One"],[8,"Zero"],[8,"Bounded"],[8,"Saturating"],[8,"ToPrimitive"],[8,"ToBigInt"],[8,"ToBigUint"],[8,"AsPrimitive"],[8,"ComplexFloat"],[8,"Average"],[8,"Roots"],[8,"Pow"],[8,"ToBytes"],[8,"FromBytes"],[8,"FloatConst"],[8,"ConstOne"],[8,"Inv"],[8,"MulAdd"],[8,"ConstZero"],[8,"CheckedEuclid"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Euclid"],[8,"MulAddAssign"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"FloatCore"],[8,"TotalOrder"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Real"]]},\
"num_bigint":{"doc":"Big Integer Types for Rust","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","ZERO","ZERO","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_div_euclid","checked_div_euclid","checked_div_rem_euclid","checked_div_rem_euclid","checked_mul","checked_mul","checked_mul","checked_rem_euclid","checked_rem_euclid","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","dec","dec","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_euclid","div_euclid","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","div_rem_euclid","div_rem_euclid","divides","divides","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_be_bytes","from_be_bytes","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_le_bytes","from_le_bytes","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","inc","inc","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modinv","modinv","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","provide","provide","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_euclid","rem_euclid","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_be_bytes","to_be_bytes","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_le_bytes","to_le_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigintd":["A big signed integer type.","A big unsigned integer type.","","","","","A <code>Sign</code> is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","A constant <code>BigInt</code> with value 0, useful for static …","A constant <code>BigUint</code> with value 0, useful for static …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","","","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","","","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns the modular multiplicative inverse if it exists, …","Returns the modular multiplicative inverse if it exists, …","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate <code>Sign</code> value.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given position","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","","Returns the truncated principal square root of <code>self</code> – …","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,15,15,0,15,0,0,0,0,0,0,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,1,1,1,1,14,14,14,14,1,1,14,14,1,14,15,22,23,18,20,1,14,15,22,23,18,20,1,1,14,14,1,1,14,1,1,14,1,14,1,14,1,1,14,1,14,1,1,14,1,14,15,18,20,1,14,1,14,15,18,20,1,14,15,22,23,14,1,14,1,14,18,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,18,20,1,1,1,1,1,1,1,14,14,14,14,14,14,15,18,18,20,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,15,22,23,18,20,1,14,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,1,14,1,14,15,22,23,18,20,22,23,20,1,1,14,1,14,1,1,14,1,14,1,1,14,1,14,1,14,22,23,1,14,22,23,1,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,1,15,1,14,22,23,22,23,1,14,1,1,23,1,1,14,14,1,14,1,14,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,14,1,14,18,20,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,1,14,1,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,22,23,1,1,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,1,1,1,1,1,1,1,1,1,1,1,1,1,1,14,14,14,14,14,14,14,14,1,14,1,14,36,1,14,37,1,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,15,18,20,1,14,1,14,1,1,1,14,1,14,18,20,1,14,1,14,1,14,1,14,14,1,14,1,14,14,14,14,14,14,14,14,14,15,22,23,18,20,1,14,15,22,23,18,20,1,14,15,22,23,18,20,1,14],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,1],1],[[1,2],1],[[1,3],1],[[1,2],1],[[1,4],1],[[1,5],1],[[1,6],1],[[1,7],1],[[1,8],1],[[1,9],1],[[1,10],1],[[1,9],1],[[1,10],1],[[1,7],1],[[1,9],1],[[1,8],1],[[1,10],1],[[1,11],1],[[1,5],1],[[1,1],1],[[1,3],1],[[1,8],1],[[1,7],1],[[1,12],1],[[1,4],1],[[1,5],1],[[1,2],1],[[1,12],1],[[1,1],1],[[1,11],1],[[1,9],1],[[1,4],1],[[1,12],1],[[1,8],1],[[1,1],1],[[1,6],1],[[1,13],1],[[1,4],1],[[1,7],1],[[1,6],1],[[1,3],1],[[1,5],1],[[1,13],1],[[1,11],1],[[1,11],1],[[1,6],1],[[1,10],1],[[1,12],1],[[1,13],1],[[1,13],1],[[14,6],14],[[14,14],14],[[14,9],14],[[14,6],14],[[14,9],14],[[14,13],14],[[14,14],14],[[14,4],14],[[14,4],14],[[14,2],14],[[14,4],14],[[14,9],14],[[14,3],14],[[14,2],14],[[14,13],14],[[14,3],14],[[14,3],14],[[14,6],14],[[14,6],14],[[14,13],14],[[14,2],14],[[14,4],14],[[14,13],14],[[14,3],14],[[14,2],14],[[14,14],14],[[14,9],14],[[14,14],14],[[1,10]],[[1,12]],[[1,1]],[[1,8]],[[1,5]],[[1,1]],[[1,2]],[[1,11]],[[1,6]],[[1,13]],[[1,3]],[[1,7]],[[1,4]],[[1,9]],[[14,14]],[[14,13]],[[14,14]],[[14,2]],[[14,3]],[[14,9]],[[14,4]],[[14,6]],[[1,15]],[14],[[]],[[]],[[]],[[]],[[1,9],16],[[14,9],16],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[1,9],[14,9],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[14,14],14],[[14,14],14],[[14,14],14],[[14,14],14],[[1,1]],[[1,1]],[[14,14]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[1,1],[14,14],[14,14],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],17],[[14,14],17],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1],[[17,[1]]]],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[1,1],[14,14],[15,15],[18,18],[[[20,[19]]],[[20,[19]]]],[[1,1]],[[14,14]],[[]],[[]],[[]],[[]],[[]],[[1,1],21],[[14,14],21],[[15,15],21],[22,2],[23,2],[14,9],[1],[14],[[],1],[[],14],[18,24],[20,24],[[1,13],1],[[1,11],1],[[1,7],1],[[1,6],1],[[1,6],1],[[1,2],1],[[1,11],1],[[1,2],1],[[1,6],1],[[1,4],1],[[1,7],1],[[1,5],1],[[1,8],1],[[1,1],1],[[1,10],1],[[1,3],1],[[1,1],1],[[1,10],1],[[1,12],1],[[1,5],1],[[1,8],1],[[1,6],1],[[1,3],1],[[1,11],1],[[1,9],1],[[1,5],1],[[1,10],1],[[1,2],1],[[1,8],1],[[1,3],1],[[1,4],1],[[1,8],1],[[1,2],1],[[1,13],1],[[1,4],1],[[1,13],1],[[1,12],1],[[1,13],1],[[1,4],1],[[1,12],1],[[1,1],1],[[1,1],1],[[1,12],1],[[1,9],1],[[1,9],1],[[1,5],1],[[1,3],1],[[1,7],1],[[1,9],1],[[1,11],1],[[1,7],1],[[1,10],1],[[14,3],14],[[14,13],14],[[14,13],14],[[14,13],14],[[14,2],14],[[14,14],14],[[14,4],14],[[14,9],14],[[14,3],14],[[14,2],14],[[14,4],14],[[14,3],14],[[14,3],14],[[14,14],14],[[14,14],14],[[14,6],14],[[14,9],14],[[14,2],14],[[14,9],14],[[14,9],14],[[14,13],14],[[14,2],14],[[14,4],14],[[14,6],14],[[14,4],14],[[14,6],14],[[14,6],14],[[14,14],14],[[1,8]],[[1,1]],[[1,2]],[[1,1]],[[1,7]],[[1,5]],[[1,6]],[[1,10]],[[1,4]],[[1,12]],[[1,3]],[[1,9]],[[1,11]],[[1,13]],[[14,6]],[[14,14]],[[14,4]],[[14,3]],[[14,14]],[[14,13]],[[14,2]],[[14,9]],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1]],[[14,14]],[[1,1],16],[[14,14],16],[[1,1],16],[[14,14],16],[[15,15],16],[[18,18],16],[[[20,[25]],20],16],[[1,1]],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[1,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[14,26],27],[[15,26],27],[[18,26],27],[[18,26],27],[[20,26],27],[[[20,[28]],26],27],[2,1],[[]],[8,1],[9,1],[4,1],[16,1],[11,1],[3,1],[6,1],[7,1],[5,1],[10,1],[12,1],[13,1],[14,1],[3,14],[2,14],[6,14],[16,14],[[]],[4,14],[9,14],[13,14],[[]],[[]],[[]],[[]],[[]],[[],1],[[],14],[[15,14],1],[15,1],[[],14],[15,1],[[],14],[29,[[17,[1]]]],[29,[[17,[14]]]],[7,[[17,[1]]]],[7,[[17,[14]]]],[8,[[17,[1]]]],[8,[[17,[14]]]],[[],1],[[],14],[[15,4],[[17,[1]]]],[4,[[17,[14]]]],[[15,4],[[17,[1]]]],[4,[[17,[14]]]],[[],1],[[],1],[15,1],[[],14],[24,[[30,[1,18]]]],[24,[[30,[14,18]]]],[[24,4],[[30,[1,18]]]],[[24,4],[[30,[14,18]]]],[13,[[17,[1]]]],[13,[[17,[14]]]],[9,[[17,[1]]]],[9,[[17,[14]]]],[[1,1],1],[[14,14],14],[[1,1]],[[14,14]],[1],[14],[15],[1],[14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[1],[1,16],[14,16],[[1,1],16],[[14,14],16],[1,16],[1,16],[14,16],[1,16],[14,16],[1,16],[1,16],[14,16],[1,22],[14,22],[1,23],[14,23],[22,[[17,[4]]]],[23,[[17,[9]]]],[[1,1],1],[[14,14],14],[22,2],[23,2],[1,14],[[1,1],1],[[14,14],14],[[1,1],[[17,[1]]]],[[14,14],[[17,[14]]]],[[1,1,1],1],[[14,14,14],14],[[1,2],1],[[1,8],1],[[1,6],1],[[1,9],1],[[1,12],1],[[1,6],1],[[1,12],1],[[1,9],1],[[1,11],1],[[1,11],1],[[1,4],1],[[1,13],1],[[1,7],1],[[1,1],1],[[1,10],1],[[1,10],1],[[1,2],1],[[1,12],1],[[1,8],1],[[1,2],1],[[1,6],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,3],1],[[1,10],1],[[1,5],1],[[1,13],1],[[1,1],1],[[1,12],1],[[1,4],1],[[1,1],1],[[1,7],1],[[1,4],1],[[1,13],1],[[1,10],1],[[1,8],1],[[1,4],1],[[1,11],1],[[1,5],1],[[1,3],1],[[1,3],1],[[1,1],1],[[1,5],1],[[1,7],1],[[1,6],1],[[1,3],1],[[1,7],1],[[1,5],1],[[1,11],1],[[1,2],1],[[1,9],1],[[14,9],14],[[14,4],14],[[14,13],14],[[14,6],14],[[14,3],14],[[14,4],14],[[14,13],14],[[14,3],14],[[14,2],14],[[14,14],14],[[14,9],14],[[14,14],14],[[14,9],14],[[14,2],14],[[14,6],14],[[14,13],14],[[14,3],14],[[14,6],14],[[14,6],14],[[14,4],14],[[14,14],14],[[14,3],14],[[14,2],14],[[14,13],14],[[14,2],14],[[14,9],14],[[14,14],14],[[14,4],14],[[15,15],15],[[1,9]],[[1,1]],[[1,4]],[[1,7]],[[1,8]],[[1,3]],[[1,1]],[[1,6]],[[1,13]],[[1,2]],[[1,12]],[[1,5]],[[1,10]],[[1,11]],[[14,14]],[[14,9]],[[14,2]],[[14,13]],[[14,14]],[[14,3]],[[14,4]],[[14,6]],[1,1],[1,1],[15,15],[[15,[31,[4]]],1],[[[31,[4]]],14],[22,[[17,[4]]]],[23,[[17,[9]]]],[22,17],[23,17],[[1,1],1],[[14,14],14],[1,1],[1,1],[[23,2],[[17,[9]]]],[[1,4],1],[[1,4],1],[[14,4],14],[[14,4],14],[[],1],[[],14],[4,[[17,[1]]]],[4,[[17,[14]]]],[[1,1],[[17,[21]]]],[[14,14],[[17,[21]]]],[[15,15],[[17,[21]]]],[[1,6],1],[[1,6],1],[[1,9],1],[[1,14],1],[[1,14],1],[[1,2],1],[[1,4],1],[[1,3],1],[[1,3],1],[[1,13],1],[[1,2],1],[[1,2],1],[[1,2],1],[[1,4],1],[[1,13],1],[[1,14],1],[[1,6],1],[[1,3],1],[[1,4],1],[[1,13],1],[[1,9],1],[[1,6],1],[[1,9],1],[[1,4],1],[[1,9],1],[[1,3],1],[[1,13],1],[[1,4],1],[[1,14],1],[[14,9],14],[[14,6],14],[[14,14],14],[[14,13],14],[[14,4],14],[[14,2],14],[[14,2],14],[[14,9],14],[[14,13],14],[[14,9],14],[[14,14],14],[[14,3],14],[[14,13],14],[[14,2],14],[[14,3],14],[[14,4],14],[[14,9],14],[[14,6],14],[[14,6],14],[[14,14],14],[[14,13],14],[[14,2],14],[[14,3],14],[[14,4],14],[[14,4],14],[[14,6],14],[[14,3],14],[[14,14],14],[[14,4],14],[[1,1],1],[[14,14],14],[[],1],[[],14],[32],[32],[[1,2],1],[[1,7],1],[[1,3],1],[[1,4],1],[[1,3],1],[[1,12],1],[[1,11],1],[[1,9],1],[[1,4],1],[[1,13],1],[[1,10],1],[[1,4],1],[[1,2],1],[[1,6],1],[[1,13],1],[[1,8],1],[[1,9],1],[[1,2],1],[[1,9],1],[[1,13],1],[[1,12],1],[[1,12],1],[[1,5],1],[[1,8],1],[[1,2],1],[[1,10],1],[[1,11],1],[[1,8],1],[[1,12],1],[[1,3],1],[[1,1],1],[[1,6],1],[[1,9],1],[[1,11],1],[[1,10],1],[[1,7],1],[[1,6],1],[[1,5],1],[[1,5],1],[[1,8],1],[[1,13],1],[[1,7],1],[[1,5],1],[[1,1],1],[[1,1],1],[[1,4],1],[[1,7],1],[[1,3],1],[[1,6],1],[[1,11],1],[[1,10],1],[[1,1],1],[[14,14],14],[[14,2],14],[[14,3],14],[[14,6],14],[[14,9],14],[[14,6],14],[[14,13],14],[[14,2],14],[[14,13],14],[[14,13],14],[[14,2],14],[[14,6],14],[[14,9],14],[[14,13],14],[[14,14],14],[[14,14],14],[[14,9],14],[[14,3],14],[[14,6],14],[[14,14],14],[[14,3],14],[[14,4],14],[[14,4],14],[[14,9],14],[[14,2],14],[[14,3],14],[[14,4],14],[[14,4],14],[[1,13]],[[1,8]],[[1,2]],[[1,3]],[[1,1]],[[1,5]],[[1,1]],[[1,12]],[[1,9]],[[1,7]],[[1,6]],[[1,4]],[[1,11]],[[1,10]],[[14,6]],[[14,4]],[[14,9]],[[14,14]],[[14,3]],[[14,14]],[[14,13]],[[14,2]],[[1,1],1],[[14,14],14],[[1,9,16]],[[14,9,16]],[1],[14],[1],[14],[[1,10],1],[[1,2],1],[[1,7],1],[[1,8],1],[[1,10],1],[[1,12],1],[[1,12],1],[[1,7],1],[[1,5],1],[[1,8],1],[[1,3],1],[[1,6],1],[[1,9],1],[[1,3],1],[[1,11],1],[[1,13],1],[[1,12],1],[[1,7],1],[[1,2],1],[[1,2],1],[[1,7],1],[[1,10],1],[[1,5],1],[[1,12],1],[[1,4],1],[[1,8],1],[[1,5],1],[[1,4],1],[[1,9],1],[[1,4],1],[[1,3],1],[[1,6],1],[[1,3],1],[[1,10],1],[[1,9],1],[[1,11],1],[[1,13],1],[[1,11],1],[[1,4],1],[[1,11],1],[[1,2],1],[[1,13],1],[[1,5],1],[[1,6],1],[[1,8],1],[[1,13],1],[[1,9],1],[[1,6],1],[[14,5],14],[[14,13],14],[[14,9],14],[[14,11],14],[[14,10],14],[[14,2],14],[[14,8],14],[[14,8],14],[[14,6],14],[[14,10],14],[[14,10],14],[[14,5],14],[[14,13],14],[[14,7],14],[[14,8],14],[[14,11],14],[[14,4],14],[[14,13],14],[[14,4],14],[[14,9],14],[[14,2],14],[[14,12],14],[[14,4],14],[[14,6],14],[[14,8],14],[[14,3],14],[[14,9],14],[[14,11],14],[[14,3],14],[[14,5],14],[[14,4],14],[[14,11],14],[[14,3],14],[[14,13],14],[[14,2],14],[[14,6],14],[[14,6],14],[[14,12],14],[[14,9],14],[[14,5],14],[[14,12],14],[[14,7],14],[[14,3],14],[[14,7],14],[[14,7],14],[[14,2],14],[[14,10],14],[[14,12],14],[[1,2]],[[1,4]],[[1,3]],[[1,11]],[[1,8]],[[1,6]],[[1,7]],[[1,6]],[[1,2]],[[1,5]],[[1,12]],[[1,13]],[[1,12]],[[1,10]],[[1,5]],[[1,9]],[[1,9]],[[1,13]],[[1,8]],[[1,3]],[[1,11]],[[1,4]],[[1,10]],[[1,7]],[[14,11]],[[14,10]],[[14,3]],[[14,13]],[[14,2]],[[14,5]],[[14,8]],[[14,12]],[[14,8]],[[14,7]],[[14,12]],[[14,4]],[[14,13]],[[14,10]],[[14,9]],[[14,4]],[[14,3]],[[14,6]],[[14,9]],[[14,2]],[[14,5]],[[14,7]],[[14,11]],[[14,6]],[[1,13],1],[[1,3],1],[[1,9],1],[[1,6],1],[[1,9],1],[[1,4],1],[[1,8],1],[[1,7],1],[[1,13],1],[[1,5],1],[[1,7],1],[[1,3],1],[[1,5],1],[[1,2],1],[[1,11],1],[[1,8],1],[[1,9],1],[[1,6],1],[[1,5],1],[[1,13],1],[[1,10],1],[[1,3],1],[[1,12],1],[[1,7],1],[[1,12],1],[[1,6],1],[[1,11],1],[[1,7],1],[[1,9],1],[[1,12],1],[[1,2],1],[[1,3],1],[[1,4],1],[[1,6],1],[[1,10],1],[[1,10],1],[[1,12],1],[[1,8],1],[[1,11],1],[[1,8],1],[[1,13],1],[[1,5],1],[[1,10],1],[[1,11],1],[[1,2],1],[[1,4],1],[[1,2],1],[[1,4],1],[[14,9],14],[[14,12],14],[[14,12],14],[[14,3],14],[[14,9],14],[[14,5],14],[[14,11],14],[[14,11],14],[[14,10],14],[[14,6],14],[[14,8],14],[[14,4],14],[[14,4],14],[[14,3],14],[[14,7],14],[[14,7],14],[[14,8],14],[[14,8],14],[[14,5],14],[[14,6],14],[[14,13],14],[[14,6],14],[[14,10],14],[[14,5],14],[[14,2],14],[[14,13],14],[[14,2],14],[[14,10],14],[[14,8],14],[[14,12],14],[[14,10],14],[[14,9],14],[[14,7],14],[[14,2],14],[[14,12],14],[[14,6],14],[[14,3],14],[[14,13],14],[[14,9],14],[[14,13],14],[[14,11],14],[[14,11],14],[[14,4],14],[[14,4],14],[[14,5],14],[[14,2],14],[[14,7],14],[[14,3],14],[[1,7]],[[1,8]],[[1,9]],[[1,6]],[[1,12]],[[1,4]],[[1,10]],[[1,7]],[[1,5]],[[1,13]],[[1,3]],[[1,8]],[[1,2]],[[1,11]],[[1,9]],[[1,3]],[[1,6]],[[1,13]],[[1,12]],[[1,10]],[[1,5]],[[1,11]],[[1,4]],[[1,2]],[[14,9]],[[14,11]],[[14,10]],[[14,13]],[[14,5]],[[14,12]],[[14,2]],[[14,8]],[[14,8]],[[14,3]],[[14,9]],[[14,2]],[[14,6]],[[14,11]],[[14,13]],[[14,7]],[[14,12]],[[14,4]],[[14,7]],[[14,5]],[[14,3]],[[14,4]],[[14,6]],[[14,10]],[1,15],[1,1],[22],[23],[1,1],[1,1],[14,14],[14,14],[[1,8],1],[[1,7],1],[[1,10],1],[[1,13],1],[[1,12],1],[[1,2],1],[[1,2],1],[[1,11],1],[[1,13],1],[[1,3],1],[[1,3],1],[[1,11],1],[[1,7],1],[[1,2],1],[[1,5],1],[[1,1],1],[[1,1],1],[[1,10],1],[[1,6],1],[[1,12],1],[[1,13],1],[[1,11],1],[[1,1],1],[[1,5],1],[[1,10],1],[[1,9],1],[[1,5],1],[[1,7],1],[[1,9],1],[[1,10],1],[[1,6],1],[[1,8],1],[[1,4],1],[[1,4],1],[[1,12],1],[[1,6],1],[[1,3],1],[[1,13],1],[[1,6],1],[[1,5],1],[[1,1],1],[[1,2],1],[[1,8],1],[[1,11],1],[[1,3],1],[[1,4],1],[[1,4],1],[[1,12],1],[[1,8],1],[[1,9],1],[[1,9],1],[[1,7],1],[[14,6],14],[[14,3],14],[[14,13],14],[[14,9],14],[[14,4],14],[[14,14],14],[[14,13],14],[[14,6],14],[[14,2],14],[[14,2],14],[[14,9],14],[[14,14],14],[[14,4],14],[[14,3],14],[[14,4],14],[[14,6],14],[[14,9],14],[[14,6],14],[[14,2],14],[[14,14],14],[[14,4],14],[[14,2],14],[[14,3],14],[[14,13],14],[[14,13],14],[[14,3],14],[[14,14],14],[[14,9],14],[[1,5]],[[1,2]],[[1,3]],[[1,10]],[[1,7]],[[1,11]],[[1,6]],[[1,8]],[[1,12]],[[1,4]],[[1,1]],[[1,13]],[[1,1]],[[1,9]],[[14,9]],[[14,4]],[[14,14]],[[14,13]],[[14,14]],[[14,6]],[[14,2]],[[14,3]],[[],1],[[],14],[1],[14],[[],[[17,[1]]]],[1,[[17,[1]]]],[14,[[17,[1]]]],[[],[[17,[14]]]],[1,[[17,[14]]]],[1,[[17,[14]]]],[14,[[17,[14]]]],[1],[14,[[31,[3]]]],[1],[14,[[31,[3]]]],[1,[[17,[33]]]],[14,[[17,[33]]]],[1,[[17,[29]]]],[14,[[17,[29]]]],[1,[[17,[7]]]],[14,[[17,[7]]]],[1,[[17,[8]]]],[14,[[17,[8]]]],[1],[14],[[]],[[]],[[]],[[]],[[]],[[1,4]],[[14,4],[[31,[3]]]],[[1,4]],[[14,4],[[31,[3]]]],[1,[[31,[3]]]],[1,[[31,[3]]]],[[1,4],34],[[14,4],34],[[],34],[[],34],[[],34],[[],34],[1,[[17,[13]]]],[14,[[17,[13]]]],[1],[14,[[31,[4]]]],[1,[[17,[9]]]],[14,[[17,[9]]]],[1],[14,[[31,[9]]]],[14,9],[1,[[17,[9]]]],[14,[[17,[9]]]],[[],30],[7,[[30,[14,20]]]],[1,[[30,[14,[20,[1]]]]]],[11,[[30,[14,20]]]],[12,[[30,[14,20]]]],[5,[[30,[14,20]]]],[8,[[30,[14,20]]]],[10,[[30,[14,20]]]],[1,[[30,[14,20]]]],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],35],[[],1],[[],14]],"p":[[3,"BigInt"],[15,"usize"],[15,"u8"],[15,"u32"],[15,"i16"],[15,"u16"],[15,"i128"],[15,"i64"],[15,"u64"],[15,"i32"],[15,"isize"],[15,"i8"],[15,"u128"],[3,"BigUint"],[4,"Sign"],[15,"bool"],[4,"Option"],[3,"ParseBigIntError"],[8,"Clone"],[3,"TryFromBigIntError"],[4,"Ordering"],[3,"U32Digits"],[3,"U64Digits"],[15,"str"],[8,"PartialEq"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"f64"],[4,"Result"],[3,"Vec"],[3,"Demand"],[15,"f32"],[3,"String"],[3,"TypeId"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_complex":{"doc":"Complex numbers.","t":"DGGISSDQSKLKLLKLLLLLLLLLLLLLLKLLLKLLKLLKLLKLLLLLLFFKLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLMLLLLLKLLKLLKLLKLLLLKLLKLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLKLMKLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Complex","Complex32","Complex64","ComplexFloat","I","ONE","ParseComplexError","Real","ZERO","abs","abs","acos","acos","acos","acosh","acosh","acosh","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","arg","arg","arg","as_","asin","asin","asin","asinh","asinh","asinh","atan","atan","atan","atanh","atanh","atanh","borrow","borrow","borrow_mut","borrow_mut","c32","c64","cbrt","cbrt","cbrt","cis","clone","clone_into","conj","conj","conj","cos","cos","cos","cosh","cosh","cosh","default","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","exp","exp","exp","exp2","exp2","exp2","expf","expf","expf","fdiv","finv","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_polar","from_str","from_str_radix","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","hash","i","im","im","im","into","into","inv","inv","inv","is_finite","is_finite","is_finite","is_infinite","is_infinite","is_infinite","is_nan","is_nan","is_nan","is_normal","is_normal","is_normal","is_one","is_zero","l1_norm","l1_norm","l1_norm","ln","ln","ln","log","log","log","log10","log10","log10","log2","log2","log2","mul","mul","mul","mul","mul","mul","mul","mul","mul_add","mul_add","mul_add_assign","mul_add_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","norm","norm_sqr","one","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","powc","powc","powc","powf","powf","powf","powi","powi","powi","powu","product","product","provide","re","re","re","recip","recip","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","scale","set_one","set_zero","sin","sin","sin","sinh","sinh","sinh","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","tan","tan","tan","tanh","tanh","tanh","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_owned","to_polar","to_string","to_string","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","try_from","try_from","try_into","try_into","type_id","type_id","unscale","zero"],"q":["num_complexd":["A complex number in Cartesian form.","Alias for a <code>Complex&lt;f32&gt;</code>","Alias for a <code>Complex&lt;f64&gt;</code>","Generic trait for floating point complex numbers.","A constant <code>Complex</code> <em>i</em>, the imaginary unit.","A constant <code>Complex</code> 1.","","The type used to represent the real coefficients of this …","A constant <code>Complex</code> 0.","Returns the absolute value of the number. See also …","","Computes the arccosine of a number. Return value is in …","Computes the principal value of the inverse cosine of <code>self</code>.","","Inverse hyperbolic cosine function.","Computes the principal value of inverse hyperbolic cosine …","","","","","","","","","","","","","","Computes the argument of the number.","Calculate the principal Arg of self.","","","Computes the arcsine of a number. Return value is in …","","Computes the principal value of the inverse sine of <code>self</code>.","Inverse hyperbolic sine function.","","Computes the principal value of inverse hyperbolic sine of …","Computes the arctangent of a number. Return value is in …","","Computes the principal value of the inverse tangent of <code>self</code>…","Inverse hyperbolic tangent function.","Computes the principal value of inverse hyperbolic tangent …","","","","","","Create a new <code>Complex&lt;f32&gt;</code> with arguments that can convert …","Create a new <code>Complex&lt;f64&gt;</code> with arguments that can convert …","Take the cubic root of a number.","Computes the principal value of the cube root of <code>self</code>.","","Create a new Complex with a given phase: <code>exp(i * phase)</code>. …","","","Computes the complex conjugate of the number.","Returns the complex conjugate. i.e. <code>re - i im</code>","","Computes the cosine of a number (in radians).","","Computes the cosine of <code>self</code>.","Hyperbolic cosine function.","Computes the hyperbolic cosine of <code>self</code>.","","","","","","","","","","","","","","","","","","Returns <code>e^(self)</code>, (the exponential function).","","Computes <code>e^(self)</code>, where <code>e</code> is the base of the natural …","Returns <code>2^(self)</code>.","Computes <code>2^(self)</code>.","","Returns <code>base^(self)</code>.","Raises a floating point number to the complex power <code>self</code>.","","Returns <code>self/other</code> using floating-point operations.","Returns <code>1/self</code> using floating-point operations.","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","Convert a polar representation into a complex number.","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","Parses <code>a +/- bi</code>; <code>ai +/- b</code>; <code>a</code>; or <code>bi</code> where <code>a</code> and <code>b</code> are of …","","","","","","","","Returns the imaginary unit.","Returns the imaginary part of the number.","","Imaginary portion of the complex number","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns <code>1/self</code>","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","","Checks if the given complex number is finite","Returns <code>true</code> if this value is positive infinity or …","Checks if the given complex number is infinite","","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Checks if the given complex number is NaN","","Returns <code>true</code> if the number is neither zero, infinite, …","Checks if the given complex number is normal","","","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","","Returns the L1 norm <code>|re| + |im|</code> – the Manhattan distance …","Returns the natural logarithm of the number.","Computes the principal value of natural logarithm of <code>self</code>.","","Returns the logarithm of the number with respect to an …","Returns the logarithm of <code>self</code> with respect to an arbitrary …","","Returns the base 10 logarithm of the number.","Computes the principal value of log base 10 of <code>self</code>.","","Returns the base 2 logarithm of the number.","Computes the principal value of log base 2 of <code>self</code>.","","","","","","","","","","","","","","","","","","","","Create a new <code>Complex</code>","Calculate |self|","Returns the square of the norm (since <code>T</code> doesn’t …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Raises <code>self</code> to a complex power.","","Raises <code>self</code> to a complex power.","Raises <code>self</code> to a real power.","","Raises <code>self</code> to a floating point power.","Raises <code>self</code> to a signed integer power.","Raises <code>self</code> to a signed integer power.","","Raises <code>self</code> to an unsigned integer power.","","","","Returns the real part of the number.","","Real portion of the complex number","Take the reciprocal (inverse) of a number, <code>1/x</code>. See also …","","","","","","","","","","","","","","Multiplies <code>self</code> by the scalar <code>t</code>.","","","Computes the sine of a number (in radians).","Computes the sine of <code>self</code>.","","Hyperbolic sine function.","","Computes the hyperbolic sine of <code>self</code>.","Take the square root of a number.","Computes the principal value of the square root of <code>self</code>.","","","","","","","","","","","","","","","","Computes the tangent of a number (in radians).","","Computes the tangent of <code>self</code>.","Hyperbolic tangent function.","Computes the hyperbolic tangent of <code>self</code>.","","","","","","","","","","","Convert to polar form (r, theta), such that …","","","","","","","","","","","","","","","Divides <code>self</code> by the scalar <code>t</code>.",""],"i":[0,0,0,0,3,3,0,48,3,48,3,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,3,3,48,3,3,48,3,3,48,3,3,48,3,3,3,15,3,15,0,0,48,3,3,3,3,3,48,3,3,48,3,3,48,3,3,3,15,3,3,3,3,3,3,3,3,3,3,3,3,3,15,48,3,3,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,15,15,3,3,3,3,15,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,3,3,15,3,3,3,48,3,3,48,3,3,48,3,3,48,3,3,3,3,48,3,3,48,3,3,48,3,3,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,3,48,3,3,48,3,3,3,3,3,15,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,3,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,48,3,3,48,3,3,3,3,3,3,3,3,3,3,3,3,3,15,3,3,3,3,3,3,3,15,3,15,3,15,3,3],"f":[0,0,0,0,0,0,0,0,0,[[]],[[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[3],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[3,[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[]],[[[3,[1]]],1],[[[3,[[0,[1,2]]]]]],[3],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[]],[[]],[[]],[[[8,[7]],[8,[7]]],9],[[[8,[10]],[8,[10]]],11],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[1,[[3,[1]]]],[[[3,[4]]],[[3,[4]]]],[[]],[[]],[[[3,[[0,[4,5,12]]]]],[[3,[[0,[4,5,12]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[],[[3,[13]]]],[[[15,[14]]],16],[[3,3]],[3],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],3]],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[17]],3],18],[[[15,[17]],15],18],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[[3,[1]]],[[3,[1]]]],[[3,19],20],[[3,19],20],[[3,19],20],[[3,19],20],[[3,19],20],[[[3,[21]],19],20],[[3,19],20],[[3,19],20],[[[15,[22]],19],20],[[[15,[21]],19],20],[[],[[3,[[0,[4,5]]]]]],[[]],[23,[[25,[[3,[[0,[24,5]]]]]]]],[[[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[]],[7,[[25,[[3,[[0,[26,5]]]]]]]],[10,[[25,[[3,[[0,[26,5]]]]]]]],[27,[[25,[[3,[[0,[26,5]]]]]]]],[28,[[25,[[3,[[0,[26,5]]]]]]]],[29,[[25,[[3,[[0,[26,5]]]]]]]],[30,[[25,[[3,[[0,[26,5]]]]]]]],[31,[[25,[[3,[[0,[26,5]]]]]]]],[32,[[25,[[3,[[0,[26,5]]]]]]]],[[1,1],[[3,[1]]]],[16,[[33,[3]]]],[[16,34],[[33,[[3,[[0,[5,4]]]]]]]],[35,[[25,[[3,[[0,[26,5]]]]]]]],[36,[[25,[[3,[[0,[26,5]]]]]]]],[34,[[25,[[3,[[0,[26,5]]]]]]]],[37,[[25,[[3,[[0,[26,5]]]]]]]],[38,[[25,[[3,[[0,[26,5]]]]]]]],[39,[[25,[[3,[[0,[26,5]]]]]]]],[[[3,[40]]]],[[],[[3,[[0,[4,5]]]]]],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[]],[[[3,[[0,[4,5,12]]]]]],[3],[[[3,[[0,[4,5,12]]]]],[[3,[[0,[4,5,12]]]]]],[[],18],[[[3,[[0,[1,2]]]]],18],[[[3,[41]]],18],[[],18],[[[3,[41]]],18],[[[3,[[0,[1,2]]]]],18],[[],18],[[[3,[41]]],18],[[[3,[[0,[1,2]]]]],18],[[],18],[[[3,[41]]],18],[[[3,[[0,[1,2]]]]],18],[[[3,[[0,[4,5]]]]],18],[[[3,[[0,[4,5]]]]],18],[[]],[[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,42]]]]],[[0,[4,42]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[1]],1],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,5]]]],3]],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]]]],[[3,[0,[4,5]]]],[3],[[3,3,3],[[3,[[0,[4,5,43]]]]]],[[[3,[[0,[4,5,43]]]],[3,[[0,[4,5,43]]]],[3,[[0,[4,5,43]]]]],[[3,[[0,[4,5,43]]]]]],[[[3,[[0,[4,6,44]]]],[3,[[0,[4,6,44]]]],[3,[[0,[4,6,44]]]]]],[[[3,[[0,[4,6,44]]]],3,3]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,5,12]]]]]],[3],[[],3],[[[3,[1]]],1],[[[3,[[0,[4,5]]]]],[[0,[4,5]]]],[[],[[3,[[0,[4,5]]]]]],[[3,37]],[[3,3]],[[3,36]],[[3,7]],[[3,27]],[[3,29]],[[3,30]],[[3,38]],[[3,34]],[[3,30]],[[3,7]],[[[3,[1]],10]],[[3,28]],[[3,35]],[[3,10]],[[[3,[1]],[3,[1]]]],[[[3,[1]],3]],[[3,39]],[[3,35]],[[[3,[1]],7]],[[3,36]],[[3,39]],[[3,[3,[1]]]],[[3,37]],[[3,38]],[[3,10]],[[3,34]],[[[3,[1]],10]],[[3,31]],[[[3,[1]],7]],[[3,32]],[[3,29]],[[3,28]],[[3,27]],[[3,31]],[[3,32]],[3,3],[[[3,[[0,[1,2]]]],3],3],[[[3,[1]],[3,[1]]],[[3,[1]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]],1],[[3,[1]]]],[29],[[[3,[[0,[4,5,12]]]],29],[[3,[[0,[4,5,12]]]]]],[[[3,[[0,[1,2]]]],29],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]],34],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[45],[[]],[[[3,[[0,[1,2]]]]]],0,[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[4,5]]]]]],[3],[[3,[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]],3]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[3,[0,[4,5]]]],[[[3,[[0,[4,5]]]]]],[3],[[[3,[[0,[4,5]]]],[3,[[0,[4,5]]]]]],[[3,3]],[[[3,[[0,[4,5]]]],3]],[[3,[3,[[0,[4,5]]]]]],[[[3,[[0,[4,5]]]],[0,[4,5]]]],[[[3,[[0,[4,6]]]],[0,[4,6]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]]]],[[[3,[[0,[4,6]]]],[3,[[0,[4,6]]]]]],[[],[[3,[[0,[5,4]]]]]],[[],[[3,[[0,[5,4]]]]]],[[]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[1]]],[[3,[1]]]],[[]],[[[3,[1]]],[[3,[1]]]],[[[3,[[0,[1,2]]]]],[[3,[[0,[1,2]]]]]],[[[3,[[0,[23,5]]]]],[[25,[7]]]],[[[3,[[0,[23,5]]]]],[[25,[10]]]],[[[3,[[0,[23,5]]]]],[[25,[27]]]],[[[3,[[0,[23,5]]]]],[[25,[28]]]],[[[3,[[0,[23,5]]]]],[[25,[29]]]],[[[3,[[0,[23,5]]]]],[[25,[30]]]],[[[3,[[0,[23,5]]]]],[[25,[31]]]],[[[3,[[0,[23,5]]]]],[[25,[32]]]],[[]],[[[3,[1]]]],[[],46],[[],46],[[[3,[[0,[23,5]]]]],[[25,[35]]]],[[[3,[[0,[23,5]]]]],[[25,[36]]]],[[[3,[[0,[23,5]]]]],[[25,[34]]]],[[[3,[[0,[23,5]]]]],[[25,[37]]]],[[[3,[[0,[23,5]]]]],[[25,[38]]]],[[[3,[[0,[23,5]]]]],[[25,[39]]]],[[],33],[[],33],[[],33],[[],33],[[],47],[[],47],[[[3,[[0,[4,5]]]],[0,[4,5]]],[[3,[[0,[4,5]]]]]],[[],[[3,[[0,[4,5]]]]]]],"p":[[8,"Float"],[8,"FloatConst"],[3,"Complex"],[8,"Clone"],[8,"Num"],[8,"NumAssign"],[15,"f32"],[8,"Into"],[6,"Complex32"],[15,"f64"],[6,"Complex64"],[8,"Neg"],[8,"Default"],[8,"Error"],[3,"ParseComplexError"],[15,"str"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[8,"Display"],[8,"ToPrimitive"],[8,"NumCast"],[4,"Option"],[8,"FromPrimitive"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[4,"Result"],[15,"u32"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[8,"Hash"],[8,"FloatCore"],[8,"Signed"],[8,"MulAdd"],[8,"MulAddAssign"],[3,"Demand"],[3,"String"],[3,"TypeId"],[8,"ComplexFloat"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":"IDIDIFKFKFLLLLFLLLLLFLFKFLFKLLLLLLLFKMFLLLLLKKKFKFKFLLLFKLFLLLLLLLLLMM","n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","dec","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","inc","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Decrements self by one.","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","Returns the argument unchanged.","Returns the argument unchanged.","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","Increments self by one.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,11,5,11,5,0,4,4,5,5,2,0,2,0,2,0,2,0,2,2,5,2,2,5,11,5,0,2,5,0,2,2,11,5,11,2,2,2,0,2,0,2,0,11,11,2,0,4,2,0,4,4,5,11,5,11,5,11,5,5,5],"f":[0,0,0,0,0,[[1,1],1],[[]],[[1,1],1],[[]],[[[0,[2,3]],[0,[2,3]]],[[0,[2,3]]]],[[]],[[]],[[]],[[]],[4,4],[[]],[[]],[[[5,[3]]],[[5,[3]]]],[[]],[[]],[[2,2],2],[[]],[[2,2],2],[[]],[[2,2]],[[]],[[2,2]],[[]],[[],6],[[[5,[7]],5],6],[[],5],[[]],[[[5,[8]],9],10],[[]],[[]],[[2,2],2],[[]],0,[[2,2]],[[]],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[2,2],2],[[]],[[2,2],2],[[]],[[]],[[],11],[11,12],[[]],[[4,13],4],[13],[[]],[4,4],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],0,0],"p":[[8,"Average"],[8,"Integer"],[8,"Clone"],[8,"Roots"],[3,"ExtendedGcd"],[15,"bool"],[8,"PartialEq"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"IterBinomial"],[4,"Option"],[15,"u32"],[4,"Result"],[3,"TypeId"]]},\
"num_iter":{"doc":"External iterators for generic mathematics","t":"DDDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Range","RangeFrom","RangeInclusive","RangeStep","RangeStepFrom","RangeStepInclusive","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","end_bound","end_bound","end_bound","from","from","from","from","from","from","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","next","next","next","next","next","next","next_back","next_back","range","range_from","range_inclusive","range_step","range_step_from","range_step_inclusive","size_hint","size_hint","size_hint","size_hint","start_bound","start_bound","start_bound","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["num_iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An iterator over the range [start, stop)","An iterator over the infinite range starting at <code>start</code>","An iterator over the range [start, stop]","An iterator over the range [start, stop) by <code>step</code>. It …","An iterator over the infinite range starting at <code>start</code> by …","An iterator over the range [start, stop] by <code>step</code>. It …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns an iterator over the given range [start, stop) …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop]","Return an iterator over the range [start, stop) by <code>step</code>. …","Return an iterator over the infinite range starting at …","Return an iterator over the range [start, stop] by <code>step</code>. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,0,0,0,0,0,0,2,3,6,7,2,3,6,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7,2,3,4,5,6,7],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[3,[1]]],[[3,[1]]]],[[[4,[1]]],[[4,[1]]]],[[[5,[1]]],[[5,[1]]]],[[[6,[1]]],[[6,[1]]]],[[[7,[1]]],[[7,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,9],[3,9],[4,9],[5,9],[6,9],[7,9],[2,9],[3,9],[[],2],[[],6],[[],3],[[],4],[[],7],[[],5],[2],[3],[6],[7],[2,8],[3,8],[6,8],[[]],[[]],[[]],[[]],[[]],[[]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11]],"p":[[8,"Clone"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"RangeFrom"],[3,"RangeStepFrom"],[4,"Bound"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"num_rational":{"doc":"Rational numbers","t":"GSDDGGGSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["BigRational","ONE","ParseRatioError","Ratio","Rational","Rational32","Rational64","ZERO","abs","abs_sub","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","approximate_float","approximate_float_unsigned","borrow","borrow","borrow_mut","borrow_mut","ceil","checked_add","checked_div","checked_mul","checked_sub","clone","clone","clone_into","clone_into","cmp","default","denom","description","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","eq","eq","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fract","from","from","from","from","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f32","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_f64","from_float","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i128","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_i64","from_integer","from_str","from_str_radix","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u128","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","from_u64","hash","into","into","into_raw","inv","inv","is_integer","is_negative","is_one","is_positive","is_zero","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new_raw","numer","one","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","product","product","provide","recip","reduced","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","round","set_one","set_zero","signum","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_f64","to_i128","to_i64","to_integer","to_owned","to_owned","to_string","to_string","to_u128","to_u64","trunc","try_from","try_from","try_into","try_into","type_id","type_id","zero"],"q":["num_rationald":["Alias for arbitrary precision rationals.","A constant <code>Ratio</code> 1/1.","","Represents the ratio between two numbers.","Alias for a <code>Ratio</code> of machine-sized integers.","Alias for a <code>Ratio</code> of 32-bit-sized integers.","Alias for a <code>Ratio</code> of 64-bit-sized integers.","A constant <code>Ratio</code> 0/1.","","","","","","","","","","","","","","","","","","","","","Rounds towards plus infinity.","","","","","","","","","","Returns zero","Gets an immutable reference to the denominator.","","","","","","","","","","","","","","","","Rounds towards minus infinity.","","","","","","","","","","","Returns the fractional part of a number, with division …","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts a float into a rational number.","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a <code>Ratio</code> representing the integer <code>t</code>.","Parses <code>numer/denom</code> or just <code>numer</code>.","Parses <code>numer/denom</code> where the numbers are in base <code>radix</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Deconstructs a <code>Ratio</code> into its numerator and denominator.","","","Returns true if the rational number is an integer …","","","","","","","","","","","","","","","","","","","Creates a new <code>Ratio</code>.","Creates a <code>Ratio</code> without checking for <code>denom == 0</code> or …","Gets an immutable reference to the numerator.","","","","","","","","","","","","","","","","","","Raises the <code>Ratio</code> to the power of an exponent.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the reciprocal.","Returns a reduced copy of self.","","","","","","","","","","","","","Rounds to the nearest integer. Rounds half-way cases away …","","","","","","","","","","","","","","","","","","","","","Converts to an integer, rounding towards zero.","","","","","","","Rounds towards zero.","","","","","","",""],"i":[0,4,0,0,0,0,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,14,4,4,4,4,4,4,14,4,14,4,4,4,14,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,4,4,4,4,4,4,4,4,14,14,4,4,4,4,14,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,14,4,14,4,4,4,4,14,4,14,4,14,4],"f":[0,0,0,0,0,0,0,0,[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[[[4,[[0,[1,2,3]]]],4],[[4,[[0,[1,2,3]]]]]],[4,4],[4,[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[0,[6,7]]],[[9,[[4,[[0,[2,3,8,7,1]]]]]]]],[[[0,[6,7]]],[[9,[[4,[[0,[2,10,8,7,1]]]]]]]],[[]],[[]],[[]],[[]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,11,12]]]],4],[[9,[[4,[[0,[1,2,11,12]]]]]]]],[[4,4],[[9,[4]]]],[[4,4],[[9,[4]]]],[[[4,[[0,[1,2,11,13]]]],4],[[9,[[4,[[0,[1,2,11,13]]]]]]]],[[[4,[1]]],[[4,[1]]]],[14,14],[[]],[[]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],15],[[],[[4,[[0,[1,2]]]]]],[4],[14,16],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[4,4],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],17],[[14,14],17],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[18,1,2]]]],19],20],[[[4,[[0,[21,1,2]]]],19],20],[[[4,[22]],19],20],[[[4,[[0,[23,1,2]]]],19],20],[[[4,[[0,[24,1,2]]]],19],20],[[[4,[[0,[25,1,2]]]],19],20],[[[4,[[0,[26,1,2]]]],19],20],[[[4,[[0,[27,1,2]]]],19],20],[[14,19],20],[[14,19],20],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],4],[[],4],[[]],[[]],[28,[[9,[[4,[29]]]]]],[28,[[9,[[4,[30]]]]]],[28,[[9,[[4,[31]]]]]],[28,[[9,[[4,[32]]]]]],[28,[[9,[[4,[33]]]]]],[28,[[9,[[4,[34]]]]]],[28,[[9,[[4,[35]]]]]],[28,[[9,[[4,[36]]]]]],[28,[[9,[[4,[37]]]]]],[28,[[9,[[4,[38]]]]]],[28,[[9,[[4,[39]]]]]],[28,[[9,[[4,[40]]]]]],[28,[[9,[[4,[41]]]]]],[42,[[9,[[4,[36]]]]]],[42,[[9,[[4,[32]]]]]],[42,[[9,[[4,[39]]]]]],[42,[[9,[[4,[31]]]]]],[42,[[9,[[4,[40]]]]]],[42,[[9,[[4,[37]]]]]],[42,[[9,[[4,[30]]]]]],[42,[[9,[[4,[34]]]]]],[42,[[9,[[4,[41]]]]]],[42,[[9,[[4,[35]]]]]],[42,[[9,[[4,[33]]]]]],[42,[[9,[[4,[38]]]]]],[42,[[9,[[4,[29]]]]]],[6,[[9,[43]]]],[29,[[9,[[4,[36]]]]]],[29,[[9,[[4,[38]]]]]],[29,[[9,[[4,[37]]]]]],[29,[[9,[[4,[35]]]]]],[29,[[9,[[4,[39]]]]]],[29,[[9,[[4,[40]]]]]],[29,[[9,[[4,[29]]]]]],[29,[[9,[[4,[33]]]]]],[29,[[9,[[4,[34]]]]]],[29,[[9,[[4,[32]]]]]],[29,[[9,[[4,[30]]]]]],[29,[[9,[[4,[31]]]]]],[29,[[9,[[4,[41]]]]]],[40,[[9,[[4,[36]]]]]],[40,[[9,[[4,[32]]]]]],[40,[[9,[[4,[35]]]]]],[40,[[9,[[4,[31]]]]]],[40,[[9,[[4,[37]]]]]],[40,[[9,[[4,[38]]]]]],[40,[[9,[[4,[40]]]]]],[40,[[9,[[4,[34]]]]]],[40,[[9,[[4,[29]]]]]],[40,[[9,[[4,[39]]]]]],[40,[[9,[[4,[41]]]]]],[40,[[9,[[4,[30]]]]]],[40,[[9,[[4,[33]]]]]],[[[0,[1,2]]],[[4,[[0,[1,2]]]]]],[16,[[45,[[4,[[0,[44,1,2]]]],14]]]],[[16,33],[[45,[[4,[[0,[1,2]]]],14]]]],[37,[[9,[[4,[29]]]]]],[37,[[9,[[4,[31]]]]]],[37,[[9,[[4,[39]]]]]],[37,[[9,[[4,[36]]]]]],[37,[[9,[[4,[37]]]]]],[37,[[9,[[4,[32]]]]]],[37,[[9,[[4,[33]]]]]],[37,[[9,[[4,[35]]]]]],[37,[[9,[[4,[38]]]]]],[37,[[9,[[4,[41]]]]]],[37,[[9,[[4,[34]]]]]],[37,[[9,[[4,[40]]]]]],[37,[[9,[[4,[30]]]]]],[34,[[9,[[4,[39]]]]]],[34,[[9,[[4,[38]]]]]],[34,[[9,[[4,[35]]]]]],[34,[[9,[[4,[30]]]]]],[34,[[9,[[4,[34]]]]]],[34,[[9,[[4,[40]]]]]],[34,[[9,[[4,[36]]]]]],[34,[[9,[[4,[37]]]]]],[34,[[9,[[4,[41]]]]]],[34,[[9,[[4,[29]]]]]],[34,[[9,[[4,[33]]]]]],[34,[[9,[[4,[31]]]]]],[34,[[9,[[4,[32]]]]]],[[[4,[[0,[1,2,46]]]]]],[[]],[[]],[4],[4,4],[4,4],[[[4,[[0,[1,2]]]]],17],[[[4,[[0,[1,2,3]]]]],17],[[[4,[[0,[1,2]]]]],17],[[[4,[[0,[1,2,3]]]]],17],[[[4,[[0,[1,2]]]]],17],[4,4],[4,4],[4,[[4,[[0,[1,2]]]]]],[[4,4],4],[[4,4],4],[[4,4],4],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[4,4],[4,4],[[[0,[1,2]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[],4],[4],[[],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[9,[15]]]],[[[4,[[0,[1,2,[47,[30]]]]]],41],[[4,[[0,[1,2,[47,[30]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[35]]]]]],36],[[4,[[0,[1,2,[47,[35]]]]]]]],[[[4,[[0,[1,2,[47,[35]]]]]],36],[[4,[[0,[1,2,[47,[35]]]]]]]],[[[4,[[0,[1,2,[47,[34]]]]]],34],[[4,[[0,[1,2,[47,[34]]]]]]]],[[4,33],[[4,[[0,[1,2]]]]]],[[4,48],[[4,[[0,[1,2]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[37]]]]]],29],[[4,[[0,[1,2,[47,[37]]]]]]]],[[[4,[[0,[1,2,[47,[48]]]]]],48],[[4,[[0,[1,2,[47,[48]]]]]]]],[[4,41],[[4,[[0,[1,2]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[33]]]]]],33],[[4,[[0,[1,2,[47,[33]]]]]]]],[[[4,[[0,[1,2,[47,[34]]]]]],40],[[4,[[0,[1,2,[47,[34]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[32]]]]]],39],[[4,[[0,[1,2,[47,[32]]]]]]]],[[[4,[[0,[1,2,[47,[30]]]]]],30],[[4,[[0,[1,2,[47,[30]]]]]]]],[[[4,[[0,[1,2,[47,[32]]]]]],32],[[4,[[0,[1,2,[47,[32]]]]]]]],[[[4,[[0,[1,2,[47,[32]]]]]],32],[[4,[[0,[1,2,[47,[32]]]]]]]],[[4,31],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[37]]]]]],37],[[4,[[0,[1,2,[47,[37]]]]]]]],[[[4,[[0,[1,2,[47,[33]]]]]],31],[[4,[[0,[1,2,[47,[33]]]]]]]],[[4,40],[[4,[[0,[1,2]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[33]]]]]],31],[[4,[[0,[1,2,[47,[33]]]]]]]],[[4,37],[[4,[[0,[1,2]]]]]],[[4,36],[[4,[[0,[1,2]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[4,30],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[48]]]]]],38],[[4,[[0,[1,2,[47,[48]]]]]]]],[[[4,[[0,[1,2,[47,[34]]]]]],34],[[4,[[0,[1,2,[47,[34]]]]]]]],[[[4,[[0,[1,2,[47,[35]]]]]],35],[[4,[[0,[1,2,[47,[35]]]]]]]],[[4,40],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[37]]]]]],29],[[4,[[0,[1,2,[47,[37]]]]]]]],[[4,29],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[30]]]]]],30],[[4,[[0,[1,2,[47,[30]]]]]]]],[[4,38],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[48]]]]]],38],[[4,[[0,[1,2,[47,[48]]]]]]]],[[4,34],[[4,[[0,[1,2]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[4,35],[[4,[[0,[1,2]]]]]],[[4,39],[[4,[[0,[1,2]]]]]],[[4,32],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[37]]]]]],37],[[4,[[0,[1,2,[47,[37]]]]]]]],[[4,39],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[33]]]]]],33],[[4,[[0,[1,2,[47,[33]]]]]]]],[[[4,[[0,[1,2,[47,[48]]]]]],48],[[4,[[0,[1,2,[47,[48]]]]]]]],[[[4,[[0,[1,2,[47,[34]]]]]],40],[[4,[[0,[1,2,[47,[34]]]]]]]],[[[4,[[0,[1,2,[47,[30]]]]]],41],[[4,[[0,[1,2,[47,[30]]]]]]]],[[4,48],[[4,[[0,[1,2]]]]]],[[4,41],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,[47,[35]]]]]],35],[[4,[[0,[1,2,[47,[35]]]]]]]],[[[4,[[0,[1,2,[47,[32]]]]]],39],[[4,[[0,[1,2,[47,[32]]]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[49],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,4],[4,4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[4,4],4],[4,[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,3]]]]],[[4,[[0,[1,2,3]]]]]],[4,[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[[4,[[0,[1,2]]]],[0,[1,2]]],[[4,[[0,[1,2]]]]]],[[4,4],[[4,[[0,[1,2]]]]]],[4,4],[[4,4],4],[[[4,[[0,[1,2]]]],[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[[4,[[0,[1,2,5]]]],[0,[1,2,5]]]],[[[4,[[0,[1,2,5]]]],[4,[[0,[1,2,5]]]]]],[[[4,[[0,[1,2,5]]]],4]],[[[4,[[0,[1,2,5]]]]]],[[],[[4,[[0,[2,1]]]]]],[[],[[4,[[0,[2,1]]]]]],[[[4,[[0,[1,2,50,51]]]]],[[9,[42]]]],[[[4,[[0,[1,2,50,51]]]]],[[9,[29]]]],[[[4,[[0,[1,2,50,51]]]]],[[9,[40]]]],[[[4,[[0,[1,2]]]]],[[0,[1,2]]]],[[]],[[]],[[],52],[[],52],[[[4,[[0,[1,2,50,51]]]]],[[9,[37]]]],[[[4,[[0,[1,2,50,51]]]]],[[9,[34]]]],[[[4,[[0,[1,2]]]]],[[4,[[0,[1,2]]]]]],[[],45],[[],45],[[],45],[[],45],[[],53],[[],53],[[],[[4,[[0,[1,2]]]]]]],"p":[[8,"Clone"],[8,"Integer"],[8,"Signed"],[3,"Ratio"],[8,"NumAssign"],[8,"FloatCore"],[8,"NumCast"],[8,"Bounded"],[4,"Option"],[8,"Unsigned"],[8,"CheckedMul"],[8,"CheckedAdd"],[8,"CheckedSub"],[3,"ParseRatioError"],[4,"Ordering"],[15,"str"],[15,"bool"],[8,"Octal"],[3,"Formatter"],[6,"Result"],[8,"Binary"],[8,"Debug"],[8,"UpperHex"],[8,"LowerHex"],[8,"LowerExp"],[8,"Display"],[8,"UpperExp"],[15,"f32"],[15,"i128"],[15,"u8"],[15,"i32"],[15,"usize"],[15,"u32"],[15,"u64"],[15,"u16"],[15,"i16"],[15,"u128"],[3,"BigInt"],[15,"isize"],[15,"i64"],[15,"i8"],[15,"f64"],[6,"BigRational"],[8,"FromStr"],[4,"Result"],[8,"Hash"],[8,"Pow"],[3,"BigUint"],[3,"Demand"],[8,"ToPrimitive"],[8,"ToBigInt"],[3,"String"],[3,"TypeId"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":"CCCCCCCCCCCCCNCCCECCQCNCCIIIICIICDCCICCCCCCCCCCCCCCCCCLLLLAACCFFFALLLLLKAALLMCAACAACLLLLLLLCIIIKKKKIIIIKFKLLLLLKLLLLLKLLLLLLLKLLLLLKLLKKKKKKKKKKIIIKKLKLKKKLIKLKKKKKKKKKKLLLKKLKKKLKKKKLKLKKKKKKLKLKLKLKLKLLLKKKKKKLKKKLKKKKKKKKKKKKKLKLKLKLKKKKKKKLKLKKLIISISILKFKLLFKIKKKKLKKLKKKKKKKLKKKAAAAAAAAQQIIIKKLKKLIIIIIIIIKKKKKKKKIIKLKKLKIQKIIQKKIIIKKKIIIIKKKKKIIIIIIKKKKKKQIFFKIKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKIIFKFKKKFK","n":["AsPrimitive","Bounded","CheckedAdd","CheckedDiv","CheckedEuclid","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","ConstOne","ConstZero","Empty","Euclid","Float","FloatConst","FloatErrorKind","FromBytes","FromPrimitive","FromStrRadixErr","Inv","Invalid","MulAdd","MulAddAssign","Num","NumAssign","NumAssignOps","NumAssignRef","NumCast","NumOps","NumRef","One","ParseFloatError","Pow","PrimInt","RefNum","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","Signed","ToBytes","ToPrimitive","Unsigned","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","Zero","abs","abs_sub","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","cast","checked_pow","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","one","ops","pow","pow","real","sign","signum","to_string","try_from","try_from","try_into","try_into","type_id","type_id","zero","Bounded","LowerBounded","UpperBounded","max_value","max_value","min_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","TotalOrder","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","clamp","clamp","classify","classify","copysign","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","is_subnormal","is_subnormal","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","total_cmp","trunc","trunc","ConstOne","ConstZero","ONE","One","ZERO","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_ones","leading_zeros","pow","reverse_bits","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_ones","trailing_zeros","unsigned_shl","unsigned_shr","bytes","checked","euclid","inv","mul_add","overflowing","saturating","wrapping","Bytes","Bytes","FromBytes","NumBytes","ToBytes","from_be_bytes","from_le_bytes","from_ne_bytes","to_be_bytes","to_le_bytes","to_ne_bytes","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","CheckedEuclid","Euclid","checked_div_euclid","checked_div_rem_euclid","checked_rem_euclid","div_euclid","div_rem_euclid","rem_euclid","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","","","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","","","num_traits::ops::bytes","","","","","","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::euclid","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","Generic trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","","Generic trait for types implementing basic numeric …","The trait for <code>Num</code> types which also implement numeric …","","","","","The trait for <code>Num</code> references which implement numeric …","","","","","","","","","","","","","","","","","","","","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Convert from a string and radix (typically <code>2..=36</code>).","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","Numbers which have lower bounds","Numbers which have upper bounds","Returns the largest finite number this type can represent","Returns the largest finite number this type can represent","Returns the smallest finite number this type can represent","Returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Trait for floating point numbers that provide an …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","A value bounded by a minimum and a maximum","Clamps a value between a min and max.","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Returns a number composed of the magnitude of <code>self</code> and the …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns <code>true</code> if the number is subnormal.","Returns <code>true</code> if the number is subnormal.","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the ordering between <code>self</code> and <code>other</code>.","Return the integer part of a number.","Return the integer part of a number.","Defines an associated constant representing the …","Defines an associated constant representing the additive …","The multiplicative identity element of <code>Self</code>, <code>1</code>.","Defines a multiplicative identity element for <code>Self</code>.","The additive identity element of <code>Self</code>, <code>0</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading ones in the binary …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Reverses the order of bits in the integer.","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing ones in the binary …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","","","","","","","","Create a number from its representation as a byte array in …","Create a number from its representation as a byte array in …","Create a number from its memory representation as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Return the memory representation of this number as a byte …","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","","","Performs euclid division that returns <code>None</code> instead of …","Returns both the quotient and remainder from checked …","Finds the euclid remainder of dividing two numbers, …","Calculates Euclidean division, the matching method for …","Returns both the quotient and remainder from Euclidean …","Calculates the least nonnegative remainder of <code>self (mod v)</code>.","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation …","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation <code>(self * a) + b</code>","Performs the fused multiply-add assignment operation …","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,36,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,5,2,5,0,0,0,0,0,0,0,0,2,5,5,2,5,36,0,0,2,5,5,0,0,0,0,0,0,0,5,2,5,2,5,2,5,0,0,0,0,37,38,37,39,0,0,0,0,40,0,11,41,41,41,41,41,41,41,41,41,41,41,41,41,41,13,13,13,13,13,13,13,13,13,13,13,13,13,13,42,42,42,42,42,42,42,42,42,42,0,0,0,42,42,42,42,42,42,42,42,42,0,43,44,43,43,43,43,43,43,43,43,43,43,44,44,43,44,43,43,43,43,44,43,43,43,43,43,44,43,44,43,44,43,44,43,43,44,43,44,43,44,43,44,43,44,43,44,44,43,43,43,43,43,43,43,44,44,43,43,44,44,43,44,43,43,44,43,44,43,44,43,43,43,44,43,44,43,44,43,44,43,43,43,43,43,43,44,43,44,43,45,43,44,0,0,46,0,47,0,30,31,0,30,30,31,0,31,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,49,50,0,0,0,50,50,50,49,49,49,0,0,0,0,0,0,0,0,51,52,33,53,54,55,56,57,0,0,58,58,58,59,59,59,0,60,60,0,0,61,61,62,0,0,0,63,64,65,0,0,0,0,66,67,68,66,69,0,0,0,0,0,0,70,71,72,73,74,75,76,0,0,0,76,0,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,0,0,0,35,0,35,35,35,0,35],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[1,1,1],1],[[1,1],1],[[1,1],1],0,[[2,3],4],[[5,3],4],[[5,3],4],[[]],[[]],[[6,7],8],0,0,[[]],[[]],0,0,0,0,0,0,0,0,[[],9],[[],8],[[],8],[[],8],[[],8],[[],10],[[],10],0,0,0,0,[[]],[[]],[[]],[[]],0,0,0,0,[[]],[11,[[12,[11]]]],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[20,12],[21,12],[22,12],[23,12],[7,12],[24,12],[25,12],[26,12],[[],[[12,[14]]]],[[],[[12,[15]]]],[[],[[12,[16]]]],[[],[[12,[17]]]],[[],[[12,[18]]]],[[],[[12,[19]]]],[[],[[12,[20]]]],[[],[[12,[21]]]],[[],[[12,[22]]]],[[],[[12,[23]]]],[[],[[12,[7]]]],[[],[[12,[24]]]],[[],[[12,[25]]]],[[],[[12,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],27],[[],27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],29],[[]],[[]],0,0,0,0,0,0,[[],28],[[],28],[[],30],[[]],[[]],[[]],[[],31],[[]],0,[[],7],[[],7],[[]],[[]],[[],7],[[],7],[7],[[]],[7],[7],[7],[7],[[]],[[]],[[]],[[],7],[[],7],[7],[7],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[7,12],[7,12],[[],12],0,0,[[],12],[[],12],[[],12],[[]],[[]],[[]],0,0,[[]],0,0,0,[[]],[[]],0,0,0,[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[7],[7],[[]],0,0,[[[0,[32,30,33]],26],[[12,[[0,[32,30,33]]]]]],[[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,34]]]]]]]]]]]]]]]]]],26],[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,[34,[[0,[32,30,34]]]]]]]]]]]]]]]]]]]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[35,35],[[]],[[35,35],35],[[]],[[],28],[[],28],[35,35],[[]]],"p":[[8,"PartialOrd"],[4,"FloatErrorKind"],[3,"Formatter"],[6,"Result"],[3,"ParseFloatError"],[15,"str"],[15,"u32"],[4,"Result"],[3,"String"],[3,"TypeId"],[8,"NumCast"],[4,"Option"],[8,"ToPrimitive"],[15,"f32"],[15,"f64"],[15,"i128"],[15,"i16"],[15,"i32"],[15,"i64"],[15,"i8"],[15,"isize"],[15,"u128"],[15,"u16"],[15,"u64"],[15,"u8"],[15,"usize"],[4,"FpCategory"],[15,"bool"],[4,"Ordering"],[8,"One"],[8,"Zero"],[8,"Clone"],[8,"CheckedMul"],[8,"Mul"],[8,"Signed"],[8,"Num"],[8,"Bounded"],[8,"UpperBounded"],[8,"LowerBounded"],[8,"AsPrimitive"],[8,"FromPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"TotalOrder"],[8,"ConstOne"],[8,"ConstZero"],[8,"PrimInt"],[8,"ToBytes"],[8,"FromBytes"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"CheckedEuclid"],[8,"Euclid"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
